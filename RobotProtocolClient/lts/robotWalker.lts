/*
Environment model that is controllable by IA Controllers
*/

MAP = (atN0->N0_N),
N0_N = (gotoN0_N->atN0->N0_N|gotoN1_N->atN1->N1_N|follow->atN1->N1_N|turnRight->N0_E|turnLeft->N0_W|turnAround->N0_S),
N0_W = (gotoN0_N->atN0->N0_N|gotoN1_N->atN1->N1_N|turnRight->N0_N|turnLeft->N0_S|turnAround->N0_E),
N0_S = (gotoN0_N->atN0->N0_N|gotoN1_N->atN1->N1_N|turnRight->N0_W|turnLeft->N0_E|turnAround->N0_N),
N0_E = (gotoN0_N->atN0->N0_N|gotoN1_N->atN1->N1_N|turnRight->N0_S|turnLeft->N0_N|turnAround->N0_W),
N1_N = (gotoN0_N->atN0->N0_N|gotoN1_N->atN1->N1_N|turnRight->N1_E|turnLeft->N1_W|turnAround->N1_S),
N1_W = (gotoN0_N->atN0->N0_N|gotoN1_N->atN1->N1_N|turnRight->N1_N|turnLeft->N1_S|turnAround->N1_E),
N1_S = (gotoN0_N->atN0->N0_N|gotoN1_N->atN1->N1_N|follow->atN0->N0_S|turnRight->N1_W|turnLeft->N1_E|turnAround->N1_N),
N1_E = (gotoN0_N->atN0->N0_N|gotoN1_N->atN1->N1_N|turnRight->N1_S|turnLeft->N1_N|turnAround->N1_W).

ROBOT = (follow->ROBOT_REPLY|turnRight->ROBOT|turnLeft->ROBOT|turnAround->ROBOT),//|readObstacle->(block->ROBOT|nonBlock->ROBOT)),
ROBOT_REPLY = (lost->ROBOT_LOST|success->ROBOT),
ROBOT_LOST = (retry->ROBOT_RETRY),//|timeout->ROBOT_OFF),
ROBOT_RETRY = (lost->ROBOT_LOST|successRetry->ROBOT).

RELOCATOR = (successRetry->RELOCATOR_RELOCATE),
RELOCATOR_RELOCATE = (gotoN0_N->RELOCATOR|gotoN1_N->RELOCATOR).

set LocationActions = {atN0,atN1,atN2}
set ActionCommands = {follow,turnRight,turnLeft,turnAround,retry}//,readObstacle}
set RelocateCommands = {gotoN0_N,gotoN1_N}
set ReplyCommands = {lost,success,successRetry}//,block,nonBlock,timeout}
set Alphabet = {LocationActions,ActionCommands,RelocateCommands,ReplyCommands}
set ControllableActions = {LocationActions,ActionCommands,RelocateCommands}
set UncontrollableActions = {Alphabet\ControllableActions}

||Scenario = ( MAP || ROBOT || RELOCATOR).

ltl_property CANT_GO_TO_N2 = [](F_AT_N2)

fluent F_AT_N2 = <Alphabet\{atN2},atN2>
fluent F_AT_N0 = <Alphabet\{atN0},atN0>
fluent F_SUCCESS = <Alphabet\{success},success>
fluent F_SUCCESS_RETRY = <Alphabet\{successRetry},successRetry>

assert TRUE = (F_SUCCESS || !F_SUCCESS)
assert FALSE = (F_SUCCESS && !F_SUCCESS)
assert N0 = F_AT_N0
assert N2 = F_AT_N2
assert SUCCEDED = (([]<>F_SUCCESS)&&([]<>F_SUCCESS_RETRY))

controlled_det ||DET = Scenario~{Objective}.
controller ||C = (Scenario)~{Objective}.
minimal ||Min_Controller = C.

controllerSpec Objective = {
	safety = {CANT_GO_TO_N2}//que pasa que no puedo poner safety?//
	liveness = {N0}
	controllable = {ControllableActions}
}
