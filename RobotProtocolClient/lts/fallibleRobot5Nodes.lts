/*
Environment model thaat is controllable by IA Controllers
*/

/*
* sacar los atNX (X)
* los goto deberían ser no controlables, el safety debería ser algo como no hacer dos turnLeft seguidos
* el objetivo de liveness debería ser como el de las bandejas en
productioncell, se puede probar modelarlo como falla o como
gr1
*/
/*
MAP	= N0_N,
N0_N = (gotoN0_N->N0_N|gotoN4_N->N4_N|load -> N0_N|follow->N4_N|turnRight->N0_E|turnLeft->N0_W|turnAround->N0_S),
N0_W = (gotoN0_N->N0_N|gotoN4_N->N4_N|turnRight->N0_N|turnLeft->N0_S|turnAround->N0_E),
N0_S = (gotoN0_N->N0_N|gotoN4_N->N4_N|turnRight->N0_W|turnLeft->N0_E|turnAround->N0_N),
N0_E = (gotoN0_N->N0_N|gotoN4_N->N4_N|turnRight->N0_S|turnLeft->N0_N|turnAround->N0_W),
N4_N = (gotoN0_N->N0_N|gotoN4_N->N4_N|turnRight->N4_E|turnLeft->N4_W|turnAround->N4_S),
N4_W = (gotoN0_N->N0_N|gotoN4_N->N4_N|turnRight->N4_N|turnLeft->N4_S|turnAround->N4_E),
N4_S = (gotoN0_N->N0_N|gotoN4_N->N4_N|follow->N0_S|turnRight->N4_W|turnLeft->N4_E|turnAround->N4_N),
N4_E = (gotoN0_N->N0_N|gotoN4_N->N4_N|unload->N4_E|turnRight->N4_S|turnLeft->N4_N|turnAround->N4_W).
*/
MAP	= N0_N,
N0_N = (gotoN0_N->N0_N|gotoN1_N->N1_N|gotoN2_N->N2_N|gotoN3_N->N3_N|gotoN4_N->N4_N|load -> N0_N|follow->N4_N|turnRight->N0_E|turnLeft->N0_W|turnAround->N0_S),
N0_W = (gotoN0_N->N0_N|gotoN1_N->N1_N|gotoN2_N->N2_N|gotoN3_N->N3_N|gotoN4_N->N4_N|turnRight->N0_N|turnLeft->N0_S|turnAround->N0_E),
N0_S = (gotoN0_N->N0_N|gotoN1_N->N1_N|gotoN2_N->N2_N|gotoN3_N->N3_N|gotoN4_N->N4_N|turnRight->N0_W|turnLeft->N0_E|turnAround->N0_N),
N0_E = (gotoN0_N->N0_N|gotoN1_N->N1_N|gotoN2_N->N2_N|gotoN3_N->N3_N|gotoN4_N->N4_N|follow->N2_N|turnRight->N0_S|turnLeft->N0_N|turnAround->N0_W),
N1_N = (gotoN0_N->N0_N|gotoN1_N->N1_N|gotoN2_N->N2_N|gotoN3_N->N3_N|gotoN4_N->N4_N|follow->N4_N|turnRight->N1_E|turnLeft->N1_W|turnAround->N1_S),
N1_W = (gotoN0_N->N0_N|gotoN1_N->N1_N|gotoN2_N->N2_N|gotoN3_N->N3_N|gotoN4_N->N4_N|turnRight->N1_N|turnLeft->N1_S|turnAround->N1_E),
N1_S = (gotoN0_N->N0_N|gotoN1_N->N1_N|gotoN2_N->N2_N|gotoN3_N->N3_N|gotoN4_N->N4_N|follow->N0_S|turnRight->N1_W|turnLeft->N1_E|turnAround->N1_N),
N1_E = (gotoN0_N->N0_N|gotoN1_N->N1_N|gotoN2_N->N2_N|gotoN3_N->N3_N|gotoN4_N->N4_N|turnRight->N1_S|turnLeft->N1_N|turnAround->N1_W),
N2_N = (gotoN0_N->N0_N|gotoN1_N->N1_N|gotoN2_N->N2_N|gotoN3_N->N3_N|gotoN4_N->N4_N|follow->N3_N|turnRight->N2_E|turnLeft->N2_W|turnAround->N2_S),
N2_W = (gotoN0_N->N0_N|gotoN1_N->N1_N|gotoN2_N->N2_N|gotoN3_N->N3_N|gotoN4_N->N4_N|turnRight->N2_N|turnLeft->N2_S|turnAround->N2_E),
N2_S = (gotoN0_N->N0_N|gotoN1_N->N1_N|gotoN2_N->N2_N|gotoN3_N->N3_N|gotoN4_N->N4_N|follow->N0_W|turnRight->N2_W|turnLeft->N2_E|turnAround->N2_N),
N2_E = (gotoN0_N->N0_N|gotoN1_N->N1_N|gotoN2_N->N2_N|gotoN3_N->N3_N|gotoN4_N->N4_N|turnRight->N2_S|turnLeft->N2_N|turnAround->N2_W),
N3_N = (gotoN0_N->N0_N|gotoN1_N->N1_N|gotoN2_N->N2_N|gotoN3_N->N3_N|gotoN4_N->N4_N|turnRight->N3_E|turnLeft->N3_W|turnAround->N3_S),
N3_W = (gotoN0_N->N0_N|gotoN1_N->N1_N|gotoN2_N->N2_N|gotoN3_N->N3_N|gotoN4_N->N4_N|follow->N4_W|turnRight->N3_N|turnLeft->N3_S|turnAround->N3_E),
N3_S = (gotoN0_N->N0_N|gotoN1_N->N1_N|gotoN2_N->N2_N|gotoN3_N->N3_N|gotoN4_N->N4_N|follow->N2_S|turnRight->N3_W|turnLeft->N3_E|turnAround->N3_N),
N3_E = (gotoN0_N->N0_N|gotoN1_N->N1_N|gotoN2_N->N2_N|gotoN3_N->N3_N|gotoN4_N->N4_N|turnRight->N3_S|turnLeft->N3_N|turnAround->N3_W),
N4_N = (gotoN0_N->N0_N|gotoN1_N->N1_N|gotoN2_N->N2_N|gotoN3_N->N3_N|gotoN4_N->N4_N|turnRight->N4_E|turnLeft->N4_W|turnAround->N4_S),
N4_W = (gotoN0_N->N0_N|gotoN1_N->N1_N|gotoN2_N->N2_N|gotoN3_N->N3_N|gotoN4_N->N4_N|turnRight->N4_N|turnLeft->N4_S|turnAround->N4_E),
N4_S = (gotoN0_N->N0_N|gotoN1_N->N1_N|gotoN2_N->N2_N|gotoN3_N->N3_N|gotoN4_N->N4_N|follow->N0_S|turnRight->N4_W|turnLeft->N4_E|turnAround->N4_N),
N4_E = (gotoN0_N->N0_N|gotoN1_N->N1_N|gotoN2_N->N2_N|gotoN3_N->N3_N|gotoN4_N->N4_N|unload->N4_E|follow->N3_E|turnRight->N4_S|turnLeft->N4_N|turnAround->N4_W).

/*
range  RangoLocaciones 
goTo[i]->GO),
GO[loc:RangoLocaciones] = (
	when (i==1) at[1]->N1
	|when 
)

fluent AT[loc:RangoLocaciones] = <at[loc], ALPHABET/at[loc]>

AT[3] 


||MM = MAP.
*/
INTRAY = (inTray -> load -> INTRAY).
OUTTRAY = (unload -> removedFromOutputTray -> OUTTRAY).

ROBOT_CARGO = (load -> unload -> ROBOT_CARGO).
ROBOT_MOVEMENT = (follow->ROBOT_REPLY
				|turnRight->ROBOT_REPLY
				|turnLeft->ROBOT_REPLY
				|turnAround->ROBOT_REPLY),
ROBOT_REPLY = (lost->ROBOT_LOST|success->ROBOT_MOVEMENT),
ROBOT_LOST = (retry->ROBOT_RETRY),
ROBOT_RETRY = (lost->ROBOT_LOST|successRetry->ROBOT_MOVEMENT).
||ROBOT = (ROBOT_CARGO || ROBOT_MOVEMENT).

RELOCATOR = (successRetry->RELOCATOR_RELOCATE),
RELOCATOR_RELOCATE = (gotoN0_N->RELOCATOR|gotoN4_N->RELOCATOR).

set ActionCommands = {follow,turnRight,turnLeft,turnAround,retry}
set RelocateCommands = {gotoN0_N,gotoN4_N}
set ReplyCommands = {lost,success,successRetry}
set ControllableActions = {ActionCommands,unload,load}
set FailActions = {lost}
set UncontrollableActions = {FailActions,success,successRetry,inTray,removedFromOutputTray,RelocateCommands}
set Alphabet = {ControllableActions,UncontrollableActions}
||Scenario = ( MAP || ROBOT || RELOCATOR || INTRAY || OUTTRAY).


property NO_2_RIGHT = (Alphabet\{turnRight}->NO_2_RIGHT | turnRight->PREV_RIGHT ),
PREV_RIGHT = (success->PREV_RIGHT2 | Alphabet\{success}->NO_2_RIGHT),
PREV_RIGHT2 = (Alphabet\{turnRight}->NO_2_RIGHT ).

//DEFINED FLUENTS 
fluent ADDED_TO_INTRAY = <inTray, load>
fluent ADDED_TO_OUTTRAY = <unload, Alphabet\{unload}>
fluent REMOVED_FROM_OUTTRAY = <removedFromOutputTray, Alphabet\{removedFromOutputTray}>
fluent BEING_PROCESSED = <load, unload>
fluent F_SUCCESS = <success,Alphabet\{success}>
fluent F_SUCCESS_RETRY = <successRetry, Alphabet\{successRetry}>
fluent F_FAILURES = <FailActions,Alphabet\{FailActions}>

//DEFINED ASSERTIONS
assert ASSUME_ON_LOAD = (ADDED_TO_INTRAY || BEING_PROCESSED)
assert ASSUME_ON_UNLOAD = (REMOVED_FROM_OUTTRAY || BEING_PROCESSED)
assert GOAL_FOR_LOAD = ADDED_TO_OUTTRAY
assert GOAL_FOR_UNLOAD = REMOVED_FROM_OUTTRAY
assert SUCCEDED = (([]<>F_SUCCESS)&&([]<>F_SUCCESS_RETRY))
assert Failures = F_FAILURES

controller ||C = (Scenario)~{Objective}.

controllerSpec Objective = {
	safety = {NO_2_RIGHT}
	failure = {Failures}	
	assumption = {ASSUME_ON_LOAD, ASSUME_ON_UNLOAD}
	liveness = {GOAL_FOR_LOAD,GOAL_FOR_UNLOAD}
	controllable = {ControllableActions}
}
