/*
Environment model that is controllable by IA Controllers
*/
/*
Environment model thaat is controllable by IA Controllers
*/

/*
* sacar los atNX (X)
* los goto deberían ser no controlables, el safety debería ser algo como no hacer dos turnLeft seguidos
* el objetivo de liveness debería ser como el de las bandejas en
productioncell, se puede probar modelarlo como falla o como
gr1
*/
/*
hay dos escenarios posibles con respecto al relocator:
1 - representar la acción de poner el robot a mano en un nodo particular, siendo entonces controlables
2 - una vez que el robot confirmo success después de perderse, 
se observa la ubicación en la que está y se reporta, 
siendo no controlable 
porque uno no decide donde quedó (este no está sintetizando)
*/
MAP	= N0_N,
N0_N = (load -> N0_N|follow->N4_N|turnRight->N0_E|turnLeft->N0_W|turnAround->N0_S|gotoN0_N->N0_N|gotoN1_N->N1_N|gotoN4_N->N4_N),
N0_W = (turnRight->N0_N|turnLeft->N0_S|turnAround->N0_E|gotoN0_N->N0_N|gotoN1_N->N1_N|gotoN4_N->N4_N),
N0_S = (turnRight->N0_W|turnLeft->N0_E|turnAround->N0_N|gotoN0_N->N0_N|gotoN1_N->N1_N|gotoN4_N->N4_N),
N0_E = (follow->N1_N|turnRight->N0_S|turnLeft->N0_N|turnAround->N0_W|gotoN0_N->N0_N|gotoN1_N->N1_N|gotoN4_N->N4_N),
N1_N = (follow->N4_W|turnRight->N1_E|turnLeft->N1_W|turnAround->N1_S|gotoN0_N->N0_N|gotoN1_N->N1_N|gotoN4_N->N4_N),
N1_W = (turnRight->N1_N|turnLeft->N1_S|turnAround->N1_E|gotoN0_N->N0_N|gotoN1_N->N1_N|gotoN4_N->N4_N),
N1_S = (follow->N0_W|turnRight->N1_W|turnLeft->N1_E|turnAround->N1_N|gotoN0_N->N0_N|gotoN1_N->N1_N|gotoN4_N->N4_N),
N1_E = (turnRight->N1_S|turnLeft->N1_N|turnAround->N1_W|gotoN0_N->N0_N|gotoN1_N->N1_N|gotoN4_N->N4_N),
N4_N = (turnRight->N4_E|turnLeft->N4_W|turnAround->N4_S|gotoN0_N->N0_N|gotoN1_N->N1_N|gotoN4_N->N4_N),
N4_W = (turnRight->N4_N|turnLeft->N4_S|turnAround->N4_E|gotoN0_N->N0_N|gotoN1_N->N1_N|gotoN4_N->N4_N),
N4_S = (follow->N0_S|turnRight->N4_W|turnLeft->N4_E|turnAround->N4_N|gotoN0_N->N0_N|gotoN1_N->N1_N|gotoN4_N->N4_N),
N4_E = (unload->N4_E|follow->N1_S|turnRight->N4_S|turnLeft->N4_N|turnAround->N4_W|gotoN0_N->N0_N|gotoN1_N->N1_N|gotoN4_N->N4_N).

TRAY = (inTray -> load -> TRAY).

ROBOT_CARGO = (load -> unload -> ROBOT_CARGO).
ROBOT_MOVEMENT = (follow->ROBOT_REPLY
				|turnRight->ROBOT_MOVEMENT
				|turnLeft->ROBOT_MOVEMENT
				|turnAround->ROBOT_MOVEMENT),
ROBOT_REPLY = (lost->ROBOT_LOST|success->ROBOT_MOVEMENT),
ROBOT_LOST = (retry->ROBOT_RETRY),
ROBOT_RETRY = (lost->ROBOT_LOST|success->ROBOT_MOVEMENT).
||ROBOT = (ROBOT_CARGO || ROBOT_MOVEMENT).

RELOCATOR = (retry->(success->RELOCATOR_RELOCATE|lost->RELOCATOR)),
RELOCATOR_RELOCATE = (gotoN0_N->RELOCATOR|gotoN1_N->RELOCATOR|gotoN4_N->RELOCATOR).

set ActionCommands = {follow,turnRight,turnLeft,turnAround,retry}
set RelocateCommands = {gotoN0_N,gotoN1_N,gotoN4_N}
set ControllableActions = {ActionCommands,unload,load,RelocateCommands}
set FailActions = {lost}
set UncontrollableActions = {FailActions,success,inTray}
set Alphabet = {ControllableActions,UncontrollableActions}
||Scenario = ( MAP || ROBOT || RELOCATOR || TRAY).

//DEFINED FLUENTS 
fluent ADDED_TO_INTRAY = <inTray, load>
fluent ADDED_TO_OUTTRAY = <unload, Alphabet\{unload}>
fluent BEING_PROCESSED = <load, unload>
fluent F_SUCCESS = <success,Alphabet\{success}>
fluent F_FAILURES = <FailActions,Alphabet\{FailActions}>

//DEFINED ASSERTIONS
assert ASSUME_ON_LOAD = (ADDED_TO_INTRAY || BEING_PROCESSED)
assert GOAL_FOR_LOAD = ADDED_TO_OUTTRAY
assert Failures = F_FAILURES

controller ||C = (Scenario)~{Objective}.

controllerSpec Objective = {
	//safety = {CANT_GO_TO_N1}
	failure = {Failures}	
	assumption = {ASSUME_ON_LOAD}
	liveness = {GOAL_FOR_LOAD}
	controllable = {ControllableActions}
}
