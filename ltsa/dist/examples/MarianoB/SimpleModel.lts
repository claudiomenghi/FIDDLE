const MAX = 2
range R = 0..MAX
const MAXBATTERY = 4

set ControllableActions = {takeoff, land, blink, read}
set A = {ControllableActions, read.val[R]}

fluent ValueReaded = <{read.val[0..2]},{land}>
fluent IN_AIR = <{takeoff},{land}>
fluent Read = <{read}, {A\{read}}>

		// Environment
        ENV     = E0,
		E0 		= (blink -> E0
                     |read -> E1
                     |takeoff -> E2),
        E1     = (read.val[0..2] -> E0),
        E2     = (land -> E0
                     |blink -> E2
                     |read -> E3),
        E3     = (read.val[0..2] -> E2).
		
||Environment = (ENV).

// properties 
assert BLINK_ONLY_WITH_ONES = ((read.val[1] -> PROCESS_VALUE) && ((read.val[0] || read.val[2]) -> (!blink W read)))
assert PROCESS_VALUE = ((!read && !land) W blink)

assert ONLY_READ_IN_AIR = (read -> IN_AIR)
assert ONLY_BLINK_IN_AIR = (blink -> IN_AIR)
assert BLINK_AFTER_READING_VALUE = (blink -> ValueReaded)

ltl_property P_BLINK_ONLY_WITH_ONES = []BLINK_ONLY_WITH_ONES 
ltl_property P_ONLY_READ_IN_AIR  = []ONLY_READ_IN_AIR 
ltl_property P_ONLY_BLINK_IN_AIR  = []ONLY_BLINK_IN_AIR 
ltl_property P_BLINK_AFTER_READING_VALUE = []BLINK_AFTER_READING_VALUE 

controller ||Controller = Environment~{Spec}.
||EnvironmentAndController = (Environment || Controller).

controllerSpec Spec = {
        safety = {P_BLINK_ONLY_WITH_ONES, P_ONLY_READ_IN_AIR, P_ONLY_BLINK_IN_AIR,
			 P_BLINK_AFTER_READING_VALUE}
        controllable = {ControllableActions}
}


