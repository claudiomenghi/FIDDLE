//ACTION SETS
set Moves = {n, s, q}
const NORTH = 'n
const SOUTH = 's
const STOPPED = 'q

set Positions = {pos1, pos2, pos3, pos4}
set Controlled = {mn, ms, me, mw, getPackage, putPkg, crossTunnel}
set Uncontrolled = {Positions, getPackageFailed, getPkgOk, openDoor, closeDoor, pkgDropped, pkgOn}
set ControlledPlusFail = {{Controlled}, getPackageFailed}
set A = {Controlled, Uncontrolled}

//DEFINED FLUENTS 
fluent F_Pos4 = <pos4, Positions\{pos4}>
fluent F_DoorOpen = <openDoor, closeDoor>
fluent F_putPkg = <putPkg, A\{putPkg}>
fluent F_GetPackageFailed = <getPackageFailed, A\{getPackageFailed}>
fluent F_PkgDropped = <pkgDropped, A\{pkgDropped}>

//DEFINED ASSERTIONS
assert AssumptionOnDoor = F_DoorOpen
assert GetPackageFailed = F_GetPackageFailed
assert Pos4AndPackageUnloaded = (F_Pos4 && F_putPkg)
assert PkgDropped = F_PkgDropped

//DEFINED CONTROLLERS
controller ||C = (PLANT)~{G1}.

//ASSUMPTIONS COMPATIBILITY CHECKS
checkCompatibility ||C_G1_Compatible = (PLANT)~{G1}.
checkCompatibility ||C_G2_CompatibleFailures = (PLANT)~{G2}.

//DEFINED GOALS 
goal G1 = {
	safety = {PKG_RESTRICTION}
	fault = {GetPackageFailed, PkgDropped}
	assume = {AssumptionOnDoor}
	guarantee = {Pos4AndPackageUnloaded}
	controllable = {Controlled}
}
goal G2 = {
	safety = {PKG_RESTRICTION}
	fault = {GetPackageFailed, PkgDropped}
	assume = {AssumptionOnDoor}
	guarantee = {Pos4AndPackageUnloaded}
	controllable = {ControlledPlusFail}
}

//MODELS FOR TESTING
||ANALYSED_PLANT = (PLANT || PKG_RESTRICTION).

//ENVIRONMENT MODEL.
||PLANT = (DOOR || ARM || ROBOT || TOPOLOGY).

DOOR = (openDoor->closeDoor->DOOR).
ARM = (getPackage->TRY), TRY = (getPkgOk->putPkg->ARM | getPackageFailed->ARM).
ROBOT = (mn->ROBOT | ms->ROBOT | me->ROBOT | mw->ROBOT).
TOPOLOGY = (pos1->ENV_P[1][0][STOPPED]),
ENV_P[pos:1..4][doorOpen:0..1][moving:Moves] = (
	  when(doorOpen==0)									openDoor->ENV_P[pos][1][moving] 
	| when(moving==STOPPED)&&(pos!=4)					mn->ENV_P[pos][doorOpen][NORTH] 
	| when(moving==STOPPED)&&(pos!=1)					ms->ENV_P[pos][doorOpen][SOUTH]
	| when(pos==1)&&(moving==NORTH)						pos2->ENV_P[2][doorOpen][STOPPED]
	| when(pos==2)&&(moving==SOUTH)						pos1->ENV_P[1][doorOpen][STOPPED]
	| when(pos==2)&&(doorOpen==1)&&(moving==NORTH)		pos3->closeDoor->ENV_P[3][0][STOPPED]
	| when(pos==2)&&(doorOpen==0)&&(moving==NORTH)		pos2->ENV_P[pos][doorOpen][STOPPED]
	| when(pos==3)&&(moving==NORTH)						pos4->ENV_P[4][doorOpen][STOPPED]
	| when(pos==3)&&(moving==NORTH)						crossTunnel->pos4->ENV_P[4][doorOpen][STOPPED]
	| when(pos==3)&&(doorOpen==1)&&(moving==SOUTH)		pos2->closeDoor->ENV_P[2][0][STOPPED]
	| when(pos==3)&&(doorOpen==0)&&(moving==SOUTH)		pos3->ENV_P[pos][doorOpen][STOPPED]
	| when(pos==4)&&(moving==SOUTH)						pos3->ENV_P[3][doorOpen][STOPPED]
)+{me,mw}. 

//SAFETY RESTRICCIONS
//Cuando intenta agarrar el paquete, tiene que esperar a tener confirmacion de si lo agarro o puede moverse igual. 
//Si no puede moverse no hay demasiado bardo, pero si puede moverse hay que ver donde recibe el resultado, deberia ser antes de 4
//pero ademas sea donde sea deberia volver al ppio y tratar de agarrar la pelota de nuevo. Parece interesante. 
PKG_RESTRICTION = (pos1->PKG[1][0][STOPPED]),
PKG[pos:1..4][pkgOn:0..1][moving:Moves] = (
	 when(moving==STOPPED) 							mn->PKG[pos][pkgOn][NORTH]
	|when(moving==STOPPED) 							ms->PKG[pos][pkgOn][SOUTH]
	|when(moving!=STOPPED)							pos1->PKG[1][pkgOn][STOPPED]
	|when(moving!=STOPPED)							pos2->PKG[2][pkgOn][STOPPED]
	|when(moving!=STOPPED)							pos3->PKG[3][pkgOn][STOPPED]
	|when(moving==STOPPED)&&(pos==1)&&(pkgOn==0)	getPackage->TRY_PICK_PKG[pos][pkgOn][moving]
	|when(moving==STOPPED)&&(pos==4)&&(pkgOn==1)	putPkg->PKG[pos][0][moving] 
	|when(moving==NORTH)&&(pos==3)&&(pkgOn==0)		pos4->PKG[4][0][STOPPED]
	|when(moving==NORTH)&&(pos==3)&&(pkgOn==1)		crossTunnel->CROSS_TUNNEL[pos][pkgOn][moving]

), 
TRY_PICK_PKG[pos:1..4][pkgOn:0..1][moving:Moves] = (getPkgOk->PKG[pos][1][moving] 
											| getPackageFailed->PKG[pos][0][moving]
),
CROSS_TUNNEL[pos:1..4][pkgOn:0..1][moving:Moves] = (pkgOn->pos4->PKG[4][1][STOPPED] 
											| pkgDropped->pos4->PKG[4][0][STOPPED]
)+{me,mw}. 


