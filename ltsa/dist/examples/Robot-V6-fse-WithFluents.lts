set Moves = {n, s, q}
const NORTH = 'n
const SOUTH = 's
const STOPPED = 'q

assert GOAL = []<> !F_GetPackageOk

set Positions = {pos1, pos2, pos3, pos4}
set Controlled = {mn, ms, getPackage, putPackage}
set Uncontrolled = {Positions, getPackageFailed, getPackageOk, openDoor, closeDoor}
set A = {Controlled, Uncontrolled}
fluent F_Pos1 = <pos1, Positions\{pos1}>
fluent F_Pos4 = <pos4, Positions\{pos4}>

fluent F_GetPackageOk = <getPackageOk, A\{getPackageOk}>
fluent F_DoorOpen = <openDoor, closeDoor>
fluent F_TryToGetPackage = <getPackage, getPackageOk>
fluent F_PutPackage = <putPackage, A\{putPackage}>

	C = Q0,
	Q0	= (pos1 -> Q12),
	Q1	= (pos4 -> Q2),
	Q2	= (putPackage -> Q16),
	Q3	= (pos2 -> Q4),
	Q4	= (closeDoor -> Q5),
	Q5	= (ms -> Q29
		  |openDoor -> Q33),
	Q6	= (getPackageOk -> Q7
		  |getPackageFailed -> Q8),
	Q7	= (mn -> Q23),
	Q8	= (getPackage -> Q6),
	Q9	= (openDoor -> Q10
		  |ms -> Q11),
	Q10	= (ms -> Q3),
	Q11	= (openDoor -> Q3
		  |pos3 -> Q9),
	Q12	= (openDoor -> Q8
		  |getPackage -> Q13),
	Q13	= (getPackageFailed -> Q27
		  |getPackageOk -> Q28),
	Q14	= (openDoor -> Q1
		  |pos4 -> Q15),
	Q15	= (openDoor -> Q2
		  |putPackage -> Q26),
	Q16	= (ms -> Q17),
	Q17	= (pos3 -> Q10),
	Q18	= (mn -> Q19),
	Q19	= (pos3 -> Q31),
	Q20	= (pos3 -> Q9
		  |openDoor -> Q17),
	Q21	= (mn -> Q1),
	Q22	= (openDoor -> Q23
		  |pos2 -> Q24),
	Q23	= (pos2 -> Q18),
	Q24	= (openDoor -> Q18
		  |mn -> Q32),
	Q25	= (mn -> Q14
		  |openDoor -> Q21),
	Q26	= (openDoor -> Q16
		  |ms -> Q20),
	Q27	= (openDoor -> Q8),
	Q28	= (openDoor -> Q7
		  |mn -> Q22),
	Q29	= (pos1 -> Q12
		  |openDoor -> Q30),
	Q30	= (pos1 -> Q8),
	Q31	= (closeDoor -> Q25),
	Q32	= (openDoor -> Q19
		  |pos2 -> Q24),
	Q33	= (ms -> Q30).
