const N = 2
range ElemSet = 1..N
range A = 1..N/2
range B = N/2+1..N

set Toolset = {drill,oven,press}
set BlankAlpha = {[ElemSet].{inTray, pickInTray, putOutTray, end}}
set ArmAlpha = { [ElemSet].{pickInTray, putOutTray}, {begin,end}.Toolset.[ElemSet] }
set ToolsAlpha  = { {begin,put,process,get,end}.Toolset.[ElemSet] }
set Alphabet = {ArmAlpha, ToolsAlpha, BlankAlpha}

set ControllableActions = {[ElemSet].pickInTray, {put,get}.Toolset.[ElemSet]}

INIT_ELEM(C=1) = ([C].inTray -> [C].pickInTray -> END  | [C].idle -> INIT_ELEM).
TRY_TOOL(T='any, C=1) = (put[T][C] -> END).
FINISH_ELEM(C=1) = ([C].putOutTray -> [C].end -> END).

ELEM_A(C=1)= INIT_ELEM(C);
				TRY_TOOL('oven,C);
				TRY_TOOL('oven,C);
				TRY_TOOL('drill,C);
				TRY_TOOL('press,C);
				FINISH_ELEM(C);
				ELEM_A.

ELEM_B(C=N/2+1)= 	INIT_ELEM(C);
					TRY_TOOL('drill,C);
					TRY_TOOL('press,C);
					TRY_TOOL('oven,C);
					FINISH_ELEM(C);
					ELEM_B.

||ELEMS = (forall[b:B] ELEM_B(b) || forall[a:A] ELEM_A(a)).


TOOL(T='any) = (put[T][e:ElemSet] -> begin[T][e] -> 
		process[T][e] -> end[T][e] -> get[T][e] -> TOOL). 
||TOOLS = (forall[t:Toolset] TOOL(t)).

ARM = IDLE,
IDLE = ([e:ElemSet].pickInTray -> PICKED_UP[e]
		| get[t:Toolset][e:ElemSet] -> PICKED_UP[e]),
PICKED_UP[e:ElemSet] = (put[t:Toolset][e] -> IDLE
               | [e].putOutTray -> IDLE).

||Plant = (
		ELEMS ||
		TOOLS || 
		ARM).

ltl_property S1 = [](! (PROCESSING['drill] && PROCESSING['press]))

//goal tryouts
fluent ENDED[e:ElemSet] = <[e].end, Alphabet\{[e].end}> initially 1
fluent IN_PROD[e:ElemSet] = <[e].inTray,  [e].end>//Alphabet\{[e].inTray}>
fluent PROCESSING[t:Toolset] = <put[t][ElemSet], end[t][ElemSet]>
fluent READY[e:ElemSet] = <[e].pickInTray, Alphabet\{[e].pickInTray}> 
fluent PUTDOWN[t:Toolset][e:ElemSet] = <put[t][e], Alphabet\{put[t][e]}> 
fluent EXIT[e:ElemSet] = <[e].putOutTray, Alphabet\{[e].putOutTray}> 

assert A_1 = IN_PROD[1]
assert A_2 = IN_PROD[2]
assert A_3 = PROCESSING['drill]
assert A_4 = PROCESSING['oven]
assert A_5 = PROCESSING['press]

//assert G1_3 = ENDED[1]
//assert G2_3 = ENDED[2]
assert GB_1 = READY[2]
assert GB_2 = PUTDOWN['drill][2]
assert GB_3 = PUTDOWN['press][2]
assert GB_4 = PUTDOWN['oven][2]
assert GB_5 = EXIT[2]

assert GA_1 = READY[1]
assert GA_2 = PUTDOWN['oven][1]
assert GA_3 = PUTDOWN['oven][1]
assert GA_4 = PUTDOWN['drill][1]
assert GA_5 = PUTDOWN['press][1]
assert GA_6 = EXIT[1]


controller ||C = (Plant)~{Objective}.

||Comp = (C||Plant).

goal Objective = {
safety = {S1}
assume = {A_1, A_2, A_3, A_4, A_5}
guarantee = {GA_1, GA_2, GA_3, GA_4, GA_5, GA_6, GB_1, GB_2, GB_3, GB_4, GB_5}
controllable = {ControllableActions}
}
assert AssumptionsEmptyness = !([]<> A_1 && []<>A_2)
assert SS1 = [](! exists[e1:ElemSet][e2:ElemSet] (PROCESSING['drill][e1] && PROCESSING['press][e2]))

