set Moves = {n, s, q}
const NORTH = 'n
const SOUTH = 's
const STOPPED = 'q

set Positions = {pos1, pos2, pos3, pos4}
set Controlled = {mn, ms, me, mw, putPackage, getPackage}
set UND = {Positions, getPackageFailed, getPackageOk}
set Uncontrolled = {UND, openDoor, closeDoor}
set A = {Controlled, Uncontrolled}

fluent F_Pos1 = <pos1, Positions\{pos1}>
fluent F_Pos4 = <pos4, Positions\{pos4}>

fluent F_DoorOpen = <openDoor, closeDoor>
fluent F_TryToGetPackage = <getPackage, getPackageOk> //since there's no restriction for the robot to move from 4 without any package, to have assumptions compatible with the environment, the assumption has to be extended to putPackjageOk or ms
fluent F_GetPackageOk = <getPackageOk, A\{getPackageOk}>

//fluent F_PutPackage = <putPackage, A\{putPackage}>
assert DoorOpen = F_DoorOpen
assert TryToGetPackage = F_TryToGetPackage
assert GetPackageOk = F_GetPackageOk

assert ASSUME_ON_BALL = !TryToGetPackage
assert ASSUME_ON_DOOR = DoorOpen
assert Pos4JustUnloaded = F_GetPackageOk

controllerSpec G1 = {
	safety = {ROBOT_RESTRICTION}
	assumption = {ASSUME_ON_BALL, ASSUME_ON_DOOR}
	liveness = {Pos4JustUnloaded}
	controllable = {Controlled}
}
controller ||C = (PLANT)~{G1}.
checkCompatibility ||Compatible = (PLANT)~{G1}.

DOOR = (openDoor->closeDoor->DOOR).
ARM = (putPackage->PUT), 
PUT = (getPackage->TRY), TRY = (getPackageOk->ARM | getPackageFailed->PUT).
ROBOT = (mn->ROBOT | ms->ROBOT | me->ROBOT | mw->ROBOT).
TOPOLOGY = (pos1->ENV_P[1][0][0][STOPPED]),
ENV_P[pos:1..4][doorOpen:0..1][packageOn:0..1][moving:Moves] = (
	  when(doorOpen==0)									openDoor->ENV_P[pos][1][packageOn][moving]
	| when(moving==STOPPED)&&(pos!=4)					mn -> ENV_P[pos][doorOpen][packageOn][NORTH]
	| when(moving==STOPPED)&&(pos!=1)					ms -> ENV_P[pos][doorOpen][packageOn][SOUTH] 
	| when(moving==STOPPED)&&(pos==4)&&(packageOn==0)	ms -> ENV_P[pos][doorOpen][packageOn][SOUTH]
	| when(moving==STOPPED)&&(pos==1)&&(packageOn==0) 	putPackage->ENV_P[pos][doorOpen][1][moving]
	| when(moving==STOPPED)&&(pos==4)&&(packageOn==1)	getPackage->TRY_PUT_BALL[pos][doorOpen][packageOn][moving]
	| when(pos==1)&&(moving==NORTH)						pos2->ENV_P[2][doorOpen][packageOn][STOPPED]
	| when(pos==2)&&(moving==SOUTH)						pos1->ENV_P[1][doorOpen][packageOn][STOPPED]
	| when(pos==2)&&(moving==NORTH)&&(doorOpen==1)		pos3->closeDoor->ENV_P[3][0][packageOn][STOPPED]
	| when(pos==2)&&(moving==NORTH)&&(doorOpen==0)		pos2->ENV_P[pos][doorOpen][packageOn][STOPPED]
	| when(pos==3)&&(moving==NORTH)						pos4->ENV_P[4][doorOpen][packageOn][STOPPED]
	| when(pos==3)&&(moving==SOUTH)&&(doorOpen==1)		pos2->closeDoor->ENV_P[2][0][packageOn][STOPPED]
	| when(pos==3)&&(moving==SOUTH)&&(doorOpen==0)		pos3->ENV_P[3][doorOpen][packageOn][moving]
	| when(pos==4)&&(moving==SOUTH)						pos3->ENV_P[3][doorOpen][packageOn][moving]),
TRY_PUT_BALL[pos:1..4][doorOpen:0..1][packageOn:0..1][moving:Moves] = 
													(getPackageOk->ENV_P[pos][doorOpen][0][moving] 
													| getPackageFailed->ENV_P[pos][doorOpen][1][moving])+{me,mw}. 


||PLANT = (DOOR || ARM || ROBOT || TOPOLOGY).

||ANALYSED_PLANT = (PLANT || ROBOT_RESTRICTION).

||RB = ROBOT_RESTRICTION.

ROBOT_RESTRICTION = (pos1->ROBOT_D[1][0][0][STOPPED]),
ROBOT_D[pos:1..4][doorOpen:0..1][packageOn:0..1][moving:Moves] = (
	  when(doorOpen==0)									openDoor -> ROBOT_D[pos][1][packageOn][moving]
	| when(moving==STOPPED)&&(pos!=4)					mn -> ROBOT_D[pos][doorOpen][packageOn][NORTH]
	| when(moving==STOPPED)&&(pos!=1)&&(pos!=4)			ms -> ROBOT_D[pos][doorOpen][packageOn][SOUTH] //it should have the guard pos!=4 in order to force the assumptions to be compatible with the environment. 
	| when(moving==STOPPED)&&(pos==4)&&(packageOn==0)	ms -> ROBOT_D[pos][doorOpen][packageOn][SOUTH]
	| when(moving==STOPPED)&&(pos==1)&&(packageOn==0) 	putPackage->ROBOT_D[pos][doorOpen][1][moving]
	| when(moving==STOPPED)&&(pos==4)&&(packageOn==1)	getPackage->TRY_PUT_BALL[pos][doorOpen][packageOn][moving]
	| when(pos==1)&&(moving==NORTH) 					pos2->ROBOT_D[2][doorOpen][packageOn][STOPPED]
	| when(pos==2)&&(moving==NORTH)&&(doorOpen==1)		pos3->closeDoor->ROBOT_D[3][0][packageOn][STOPPED]
	| when(pos==2)&&(moving==NORTH)&&(doorOpen==0)		pos2->ROBOT_D[2][doorOpen][packageOn][STOPPED]
	| when(pos==2)&&(moving==SOUTH)						pos1->ROBOT_D[1][doorOpen][packageOn][STOPPED] 
	| when(pos==3)&&(moving==NORTH)						pos4->ROBOT_D[4][doorOpen][packageOn][STOPPED]
	| when(pos==3)&&(moving==SOUTH)&&(doorOpen==1)		pos2->closeDoor->ROBOT_D[2][0][packageOn][STOPPED]
	| when(pos==3)&&(moving==SOUTH)&&(doorOpen==0)		pos3->ROBOT_D[3][doorOpen][packageOn][moving]
	| when(pos==4)&&(moving==SOUTH)						pos3->ROBOT_D[3][doorOpen][packageOn][moving]),
TRY_PUT_BALL[pos:1..4][doorOpen:0..1][packageOn:0..1][moving:Moves] = 
													(getPackageOk->ROBOT_D[pos][doorOpen][0][moving] 
													| getPackageFailed->ROBOT_D[pos][doorOpen][1][moving])+{me,mw}. 

EXP = Q0,
	Q0	= (pos1 -> Q26),
	Q1	= (pos4 -> Q10
		  |openDoor -> Q15),
	Q2	= (mn -> Q18),
	Q3	= (pos2 -> Q13),
	Q4	= (pos2 -> Q2),
	Q5	= (getPackageOk -> Q19
		  |getPackageFailed -> Q33),
	Q6	= (openDoor -> Q20
		  |pos3 -> Q30),
	Q7	= (openDoor -> Q2
		  |mn -> Q31),
	Q8	= (openDoor -> Q4
		  |pos2 -> Q7),
	Q9	= (getPackageOk -> Q17
		  |getPackageFailed -> Q21),
	Q10	= (getPackage -> Q9
		  |openDoor -> Q27),
	Q11	= (mn -> Q8
		  |openDoor -> Q14),
	Q12	= (ms -> Q20),
	Q13	= (closeDoor -> Q29),
	Q14	= (mn -> Q4),
	Q15	= (pos4 -> Q27),
	Q16	= (ms -> Q32),
	Q17	= (ms -> Q6
		  |openDoor -> Q12),
	Q18	= (pos3 -> Q28),
	Q19	= (ms -> Q20),
	Q20	= (pos3 -> Q3),
	Q21	= (getPackage -> Q9
		  |openDoor -> Q33),
	Q22	= (putPackage -> Q14),
	Q23	= (mn -> Q1
		  |openDoor -> Q24),
	Q24	= (mn -> Q15),
	Q25	= (pos1 -> Q26
		  |openDoor -> Q32),
	Q26	= (putPackage -> Q11
		  |openDoor -> Q22),
	Q27	= (getPackage -> Q5),
	Q28	= (closeDoor -> Q23),
	Q29	= (openDoor -> Q16
		  |ms -> Q25),
	Q30	= (openDoor -> Q3
		  |pos3 -> Q30),
	Q31	= (pos2 -> Q7
		  |openDoor -> Q18),
	Q32	= (pos1 -> Q22),
	Q33	= (getPackage -> Q5).

