// ---------------------------ENVIRONMENTS-----------------------------
set ControllableActions = {initA,validateTOR, validateDSD1, validateQA, validateGF1,
							 reviewTOR, reviewDSD1, readyTOR,  readyDSD1,  readyQA, endA}
set A = {ControllableActions, receiveTOR, receiveDSD1, receiveGF1, torOk[0..1], dsd1Ok[0..1], qaOk[0..1], adjustGF1, approveGF1, cancelGF1}

//Environments
ASSESSMENT = (initA -> endA -> ASSESSMENT).

TOR = (receiveTOR -> RECEIVED),
RECEIVED = (validateTOR -> RESPONSE | endA -> TOR),
RESPONSE = (torOk[0] -> reviewTOR -> TOR | torOk[1] -> readyTOR -> TOR).

DSD1 = (receiveDSD1 -> RECEIVED),
RECEIVED = (validateDSD1 -> DSD1RESPONSE | endA -> DSD1),
DSD1RESPONSE = (dsd1Ok[0] -> reviewDSD1 -> DSD1 | dsd1Ok[1] -> readyDSD1 -> QA),
QA = (validateQA -> QARESPONSE),
QARESPONSE = (qaOk[0] -> reviewDSD1 -> DSD1 | qaOk[1] -> readyQA -> DSD1).

GATEFORM1 = (receiveGF1 -> RECEIVED),
RECEIVED = (validateGF1 -> GF1RESPONSE | endA -> GATEFORM1),
GF1RESPONSE = ({adjustGF1,approveGF1,cancelGF1} -> GATEFORM1).

||Environment = (ASSESSMENT || TOR || DSD1 || GATEFORM1).

//Fluents declaration
fluent Initiated = <initA,endA>

// TOR FLUENTS
fluent TorReceived = <receiveTOR, {endA,reviewTOR,readyTOR}>
fluent ValidatingTOR = <validateTOR,torOk[0..1]>
fluent TorDenied = <torOk[0],validateTOR>
fluent ReviewingTOR = <reviewTOR,validateTOR>
fluent TorAccepted = <torOk[1],endA>
fluent TORDone = <readyTOR,endA>

//DSD1 FLUENTS
fluent Dsd1Received = <receiveDSD1, {endA,reviewDSD1,readyDSD1}>
fluent ValidatingDSD1 = <validateDSD1,dsd1Ok[0..1]>
fluent Dsd1Denied = <dsd1Ok[0],validateDSD1>
fluent ReviewingDSD1 = <reviewDSD1, validateDSD1>
fluent Dsd1Accepted = <dsd1Ok[1],endA>
fluent DSD1Done = <readyDSD1,endA>
fluent ValidatingQA = <validateQA,qaOk[0..1]>
fluent QADenied = <qaOk[0],validateQA>
fluent QAAccepted = <qaOk[1],endA>
fluent QADone = <readyQA,{adjustGF1,endA}>

// GF1 FLUENTS
fluent Gf1Received = <receiveGF1, {endA,adjustGF1,approveGF1,cancelGF1}>
fluent ValidatingGF1 = <validateGF1,{adjustGF1,approveGF1,cancelGF1}>
fluent Finished = <{approveGF1,cancelGF1},initA>
fluent Adjusting = <adjustGF1,validateGF1>

//actions fluents controllable
fluent InitA_a = <initA,A\{initA}>
fluent ValidateQA_a = <validateQA,A\{validateQA}>
fluent ValidateTOR_a = <validateTOR,A\{validateTOR}>
fluent ValidateDSD1_a = <validateDSD1,A\{validateDSD1}>
fluent ValidateGF1_a = <validateGF1,A\{validateGF1}>
fluent ReviewTOR_a = <reviewTOR,A\{reviewTOR}>
fluent ReviewDSD1_a = <reviewDSD1,A\{reviewDSD1}>
fluent ReadyTOR_a = <readyTOR,A\{readyTOR}> 
fluent ReadyDSD1_a = <readyDSD1,A\{readyDSD1}> 
fluent ReadyQA_a = <readyQA,A\{readyQA}>
fluent EndA_a = <endA,A\{endA}>
//action fluents uncontrollable
fluent ReceiveTOR_a = <receiveTOR,A\{receiveTOR}>
fluent ReceiveDSD1_a = <receiveDSD1,A\{receiveDSD1}>
fluent ReceiveGF1_a = <receiveGF1,A\{receiveGF1}>
fluent TorOk0_a = <torOk[0],A\{torOk[0]}>
fluent TorOk1_a = <torOk[1],A\{torOk[1]}>
fluent Dsd1Ok0_a = <dsd1Ok[0], A\{dsd1Ok[0]}>
fluent Dsd1Ok1_a = <dsd1Ok[1], A\{dsd1Ok[1]}>
fluent QaOk0_a = <qaOk[0], A\{qaOk[0]}>
fluent QaOk1_a = <qaOk[1], A\{qaOk[1]}>
fluent AdjustGF1_a = <adjustGF1,A\{adjustGF1}>
fluent ApproveGF1_a = <approveGF1, A\{approveGF1}>
fluent CancelGF1_a = <cancelGF1, A\{cancelGF1}>

// ---------------------------OLD CONTROLLER SPEC-----------------------------

assert INIT_POLICY = ((ValidateTOR_a || ValidateDSD1_a || ValidateGF1_a) -> Initiated)
assert TOR_POLICY = ((ValidateDSD1_a || ValidateGF1_a) -> TORDone)
assert QA_POLICY = (ValidateGF1_a -> QADone)
assert END_POLICY = (EndA_a -> Finished)
assert DO_NOT_SEND_TWICE = ((TORDone -> !ValidateTOR_a) && 
							(QADone -> !ValidateDSD1_a) && (Finished -> !ValidateGF1_a))

ltl_property P_INIT_POLICY = []INIT_POLICY
ltl_property P_TOR_POLICY = []TOR_POLICY
ltl_property P_QA_POLICY = []QA_POLICY
ltl_property P_END_POLICY = []END_POLICY
ltl_property P_DO_NOT_SEND_TWICE = []DO_NOT_SEND_TWICE

controller ||OldController = Environment~{OldSpec}.
||EnvironmentAndController = (Environment || OldController).

controllerSpec OldSpec = {
    safety = {P_INIT_POLICY, P_TOR_POLICY, P_QA_POLICY, P_END_POLICY, P_DO_NOT_SEND_TWICE}
    controllable = {ControllableActions}
}

// ---------------------------NEW CONTROLLER SPEC-----------------------------

assert NEW_TOR_POLICY = (ValidateGF1_a -> TORDone)
assert NEW_QA_POLICY = ((ValidateDSD1_a || ValidateGF1_a) -> QADone)

ltl_property P_NEW_TOR_POLICY = []NEW_TOR_POLICY
ltl_property P_NEW_QA_POLICY = []NEW_QA_POLICY

controller ||NewController = Environment~{NewSpec}.
||NewEnvironmentAndController = (Environment || NewController).

controllerSpec NewSpec= {
    safety = {P_INIT_POLICY, P_NEW_TOR_POLICY, P_NEW_QA_POLICY, P_END_POLICY, P_DO_NOT_SEND_TWICE}
    controllable = {ControllableActions}
}


// ---------------------------UPDATING CONTROLLER SPEC-----------------------------
//Updating controller fluents
fluent InTransition = <stopOldSpec, startNewSpec> 
fluent StopOldSpec = <stopOldSpec, beginUpdate>
fluent StartNewSpec= <startNewSpec, beginUpdate>
fluent Reconfigure = <reconfigure, beginUpdate>

//ltl_property T = ()

updatingController UpdCont = {
    oldController = EnvironmentAndController,
    oldEnvironment = OldEnvironment,
    newEnvironment = NewEnvironment,
    oldGoal = OldSpec, 
    newGoal = NewSpec,
    // T = True is executed if no transition requirement is set
	//transition = T,
	nonblocking,
	oldPropositions = {Initiated, TorReceived, ValidatingTOR, TorDenied, ReviewingTOR, TorAccepted, 
        TORDone, Dsd1Received, ValidatingDSD1, Dsd1Denied, ReviewingDSD1, Dsd1Accepted, DSD1Done, 
        ValidatingQA, QADone, Gf1Received, ValidatingGF1, Finished, Adjusting, ValidatingTORQA, 
        TorQaReceived, QAAccepted, QADenied, ValidateTOR_a, ValidateDSD1_a, ValidateGF1_a, EndA_a}

    newPropositions = {Initiated, TorReceived, ValidatingTOR, TorDenied, ReviewingTOR, TorAccepted, 
        TORDone, Dsd1Received, ValidatingDSD1, Dsd1Denied, ReviewingDSD1, Dsd1Accepted, DSD1Done, 
        ValidatingQA, QADone, Gf1Received, ValidatingGF1, Finished, Adjusting, ValidatingTORQA, 
        TorQaReceived, QAAccepted, QADenied, ValidateTOR_a, ValidateDSD1_a, ValidateGF1_a, EndA_a}

}

||UPDATE_CONTROLLER = UpdCont.

// ---------------------------TEST AND RESULTS-----------------------------
assert S_OLD = (INIT_POLICY && TOR_POLICY && QA_POLICY && END_POLICY && DO_NOT_SEND_TWICE)
assert S_NEW = (INIT_POLICY && NEW_TOR_POLICY && NEW_QA_POLICY && END_POLICY && DO_NOT_SEND_TWICE)

assert TEST_FORMULA1 = [](!StopOldSpec -> S_OLD)
assert TEST_FORMULA2 = [](StartNewSpec -> S_NEW)
assert TEST_FORMULA3 = [](beginUpdate -> (<>stopOldSpec && <>startNewSpec && <>reconfigure))

