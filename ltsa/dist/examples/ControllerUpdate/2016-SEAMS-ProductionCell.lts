// -----------------------------COMMENTS-------------------------------

// - To execute the solution for update controllers select in the dropdown menu 
// the "UPDATE_CONTROLLER" label, and then press the compose button.
// - In the section of UPDATING CONTROLLER SPEC, in this file, you can spec
// different transition requeriments presented in the paper.
// - You can animate the controller obtained pressing the blue A in the top bar

// ---------------------------ENVIRONMENTS-----------------------------

//ACTION SETS
set ControllableActions = {polish, drill, stamp, out}
set OldAlphabet = {ControllableActions, in, polishOk, drillOk, stampOk, reset}
set NewControllableActions = {paint, drill, stamp, out}
set NewAlphabet = {NewControllableActions, in, paintOk, drillOk, stampOk, reset}

//Domain Old Model
	PRODUCTION_CELL_OLD = (in -> ARM),
	ARM = ( polish -> POLISHED
        | drill -> DRILLED
		| stamp -> TRASHED
		| out -> reset -> PRODUCTION_CELL_OLD),
	POLISHED = (polishOk -> ARM),
	DRILLED  = (drillOk -> ARM),
	TRASHED = (stampOk -> ARM).

//Domain New Model
	PRODUCTION_CELL_NEW = (in -> ARM),
	ARM = ( paint -> PAINTED
        | drill -> DRILLED
		| stamp -> TRASHED
		| out -> reset -> PRODUCTION_CELL_NEW),
	PAINTED = (paintOk -> ARM),
	DRILLED  = (drillOk -> ARM),
	TRASHED = (stampOk -> ARM).

||OLD_ENV = (PRODUCTION_CELL_OLD).
||NEW_ENV = (PRODUCTION_CELL_NEW).


//DEFINED FLUENTS 
fluent Drilled = <drillOk,reset>
fluent DrillPending = <drill,drillOk>
fluent Polished = <polishOk,reset>
fluent PolishPending = <polish,polishOk>
fluent Painted = <paintOk,reset>
fluent PaintPending = <paint,paintOk>
fluent Faulty = <stampOk,reset>
fluent FaultyPending = <stamp,stampOk>

fluent OldToolApplied = <{drillOk,polishOk},reset>
fluent NewToolApplied = <{paintOk,drillOk},reset>
fluent AnyToolApplied = <{paintOk,drillOk,polishOk},reset>
fluent Processing = <in,reset>
fluent OutDone = <out,reset>


// ---------------------------OLD CONTROLLER SPEC-----------------------------
assert OLD_TOOL_ORDER = ((PolishPending -> Drilled))
assert OLD_OUT_IF_FINISHED = (Old_Out_action -> (Drilled && Polished))
assert OLD_DRILL_ONCE = ( Old_Drill_action -> !Drilled )
assert POLISH_ONCE = ( Polish_action -> !Polished )
assert OLD_AVOID_STAMPING = ( !Old_Stamp_action)

ltl_property P_OLD_TOOL_ORDER = []OLD_TOOL_ORDER
ltl_property P_OLD_OUT_IF_FINISHED = []OLD_OUT_IF_FINISHED
ltl_property P_OLD_DRILL_ONCE = []OLD_DRILL_ONCE
ltl_property P_POLISH_ONCE = []POLISH_ONCE
ltl_property P_OLD_AVOID_STAMPING = []OLD_AVOID_STAMPING

controllerSpec DRILL_POLISH = {
	safety = {P_OLD_TOOL_ORDER, P_OLD_OUT_IF_FINISHED,
			P_OLD_DRILL_ONCE, P_POLISH_ONCE, P_OLD_AVOID_STAMPING 
			}
	controllable = {ControllableActions}
}
controller ||C_DRILL_POLISH = (OLD_ENV)~{DRILL_POLISH}.
||DrillPolish = (C_DRILL_POLISH || OLD_ENV).


// ---------------------------NEW CONTROLLER SPEC-----------------------------

assert NEW_TOOL_ORDER = ( (DrillPending -> Painted) && (PaintPending -> !Drilled) )
assert NEW_OUT_IF_FINISHED = (New_Out_action -> (Drilled && Painted))
assert PAINT_ONCE =   ( Paint_action -> !Painted )
assert NEW_AVOID_STAMPING = (!New_Stamp_action)
assert NEW_DRILL_ONCE = ( New_Drill_action -> !Drilled )

ltl_property P_NEW_TOOL_ORDER = []NEW_TOOL_ORDER
ltl_property P_NEW_OUT_IF_FINISHED = []NEW_OUT_IF_FINISHED
ltl_property P_PAINT_ONCE = []PAINT_ONCE
ltl_property P_NEW_AVOID_STAMPING = []NEW_AVOID_STAMPING
ltl_property P_NEW_DRILL_ONCE = []NEW_DRILL_ONCE

controllerSpec PAINT_DRILL = {
	safety = {P_NEW_TOOL_ORDER, P_NEW_OUT_IF_FINISHED,
			P_NEW_DRILL_ONCE, P_PAINT_ONCE, P_NEW_AVOID_STAMPING
			}
	controllable = {NewControllableActions}
}
controller ||C_PAINT_DRILL = (NEW_ENV)~{PAINT_DRILL}.
||PaintDrill = (C_PAINT_DRILL || NEW_ENV).

// ---------------------------UPDATING CONTROLLER SPEC-----------------------------
// Action Fluents
fluent Old_Out_action = <out,OldAlphabet\{out}>
fluent New_Out_action = <out,NewAlphabet\{out}>
fluent Out_action = <out,{OldAlphabet,NewAlphabet}\{out}>
fluent Old_action = <out,{OldAlphabet,NewAlphabet}\{out}>
fluent Old_Drill_action = <drill,OldAlphabet\{drill}>
fluent New_Drill_action = <drill,NewAlphabet\{drill}>
fluent Polish_action = <polish,OldAlphabet\{polish}>
fluent Paint_action = <paint,NewAlphabet\{paint}>
fluent Old_Stamp_action = <stamp,OldAlphabet\{stamp}>
fluent New_Stamp_action = <stamp,NewAlphabet\{stamp}>

assert S_OLD = (OLD_TOOL_ORDER  && OLD_OUT_IF_FINISHED && OLD_DRILL_ONCE && POLISH_ONCE)
assert S_NEW = (NEW_TOOL_ORDER && NEW_OUT_IF_FINISHED && NEW_DRILL_ONCE && PAINT_ONCE)

//ltl_property T
ltl_property T_REMOVE_POLISHED = ((StopOldSpec && !StartNewSpec) -> (S_NEW || (Old_Out_action -> Faulty)) )

updatingController UpdCont = {
    oldController = DrillPolish,
    oldEnvironment = OLD_ENV,
    hatEnvironment = OLD_ENV,
    newEnvironment = NEW_ENV,
    oldGoal = DRILL_POLISH,
    newGoal = PAINT_DRILL,
    transition = T_REMOVE_POLISHED,
    nonblocking,
    updateFluents = {Drilled, Polished, Painted, Faulty, Processing, DrillPending, PolishPending, Paint_action,
		PaintPending, FaultyPending, OutDone, Out_action, Old_Drill_action, New_Drill_action, Polish_action, Old_Stamp_action, New_Stamp_action}
}

||UPDATE_CONTROLLER = UpdCont.
// ---------------------------TEST AND RESULTS-----------------------------
fluent StopOldSpec = <stopOldSpec, beginUpdate>
fluent StartNewSpec = <startNewSpec,beginUpdate>
fluent Reconfigure = <reconfigure, beginUpdate>

assert TEST_FORMULA1 = [](!StopOldSpec -> S_OLD)
assert TEST_FORMULA2 = [](StartNewSpec -> S_NEW)
assert TEST_FORMULA3 = [](beginUpdate -> (<>stopOldSpec && <>startNewSpec && <>reconfigure))

