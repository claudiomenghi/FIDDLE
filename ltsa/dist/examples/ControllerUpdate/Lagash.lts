// ---------------------------ENVIRONMENTS-----------------------------
set OldControllableActions = {initA,sendTOR,sendDSD1,sendQA,sendGF1,endA}
set NewControllableActions = {OldControllableActions, sendTORQA}
set OldA = {OldControllableActions, torOk[0..1], dsd1Ok[0..1], qaOk[0..1], adjustGF1, approveGF1, cancelGF1}
set NewA = {NewControllableActions, torQaOk[0..1]}

//Environments
ASSESSMENT = (initA -> endA -> ASSESSMENT).

OLDTOR = (sendTOR -> torOk[0..1] -> OLDTOR).

DSD1 = (sendDSD1 -> DSD1RESPONSE),
DSD1RESPONSE = (dsd1Ok[0] -> DSD1 | dsd1Ok[1] -> QA),
QA = (sendQA -> QARESPONSE),
QARESPONSE = (qaOk[0..1] -> DSD1).

GATEFORM1 = (sendGF1 -> GF1RESPONSE),
GF1RESPONSE = ({adjustGF1,approveGF1,cancelGF1} -> GATEFORM1).

||OldEnvironment = (ASSESSMENT || OLDTOR || DSD1 || GATEFORM1).

NEWTOR = (sendTOR -> RESPONSETOR),
RESPONSETOR = (torOk[0] -> NEWTOR | torOk[1] -> QA),
QA = (sendTORQA -> QARESPONSE),
QARESPONSE = (torQaOk[0..1] -> NEWTOR).

||NewEnvironment = (ASSESSMENT || NEWTOR || DSD1 || GATEFORM1).

//Fluents declaration
fluent Initiated = <initA,endA>
fluent OldTORDone = <torOk[1],endA>
//fluent DSD1Done = <dsd1Ok[1],endA>
fluent QADone = <qaOk[1],endA>
fluent Finished = <{approveGF1,cancelGF1},initA>

fluent NewTORDone = <torQaOk[1],endA>

//actions fluents
fluent InitA_a = <initA,OldA\{initA}>
fluent SendQA_a = <sendQA,OldA\{sendQA}>
fluent SendTOR_a = <sendTOR,OldA\{sendTOR}>
fluent SendDSD1_a = <sendDSD1,OldA\{sendDSD1}>
fluent SendGF1_a = <sendGF1,OldA\{sendGF1}>
fluent EndA_a = <endA,OldA\{endA}>

fluent SendTORQA_a = <sendTORQA, NewA\{sendTORQA}>

fluent TorOk0_a = <torOk[0],OldA\{torOk[0]}>
fluent TorOk1_a = <torOk[1],OldA\{torOk[1]}>
fluent Dsd1Ok0_a = <dsd1Ok[0], OldA\{dsd1Ok[0]}>
fluent Dsd1Ok1_a = <dsd1Ok[1], OldA\{dsd1Ok[1]}>
fluent QaOk0_a = <qaOk[0], OldA\{qaOk[0]}>
fluent QaOk1_a = <qaOk[1], OldA\{qaOk[1]}>
fluent AdjustGF1_a = <adjustGF1,OldA\{adjustGF1}>
fluent ApproveGF1_a = <approveGF1, OldA\{approveGF1}>
fluent CancelGF1_a = <cancelGF1, OldA\{cancelGF1}>
fluent TorQaOk0_a = <torQaOk[0],NewA\{torQaOk[0]}>
fluent TorQaOk1_a = <torQaOk[1],NewA\{torQaOk[1]}>


// ---------------------------OLD CONTROLLER SPEC-----------------------------

assert INIT_POLICY = ((SendTOR_a || SendDSD1_a || SendGF1_a) -> Initiated)
assert OLD_TOR_POLICY = ((SendDSD1_a || SendGF1_a) -> OldTORDone)
assert QA_POLICY = (SendGF1_a -> QADone)
assert END_POLICY = (EndA_a -> Finished)
assert OLD_DO_NOT_SEND_TWICE = ((OldTORDone -> !SendTOR_a) && 
							(QADone -> !SendDSD1_a) && (Finished -> !SendGF1_a))

ltl_property P_INIT_POLICY = []INIT_POLICY
ltl_property P_OLD_TOR_POLICY = []OLD_TOR_POLICY
ltl_property P_QA_POLICY = []QA_POLICY
ltl_property P_END_POLICY = []END_POLICY
ltl_property P_OLD_DO_NOT_SEND_TWICE = []OLD_DO_NOT_SEND_TWICE

controller ||OldController = OldEnvironment~{OldSpec}.
||EnvironmentAndController = (OldEnvironment || OldController).

controllerSpec OldSpec = {
    safety = {P_INIT_POLICY, P_OLD_TOR_POLICY, P_QA_POLICY, P_END_POLICY, P_OLD_DO_NOT_SEND_TWICE}
    controllable = {OldControllableActions}
}

// ---------------------------NEW CONTROLLER SPEC-----------------------------

assert NEW_TOR_POLICY = ((SendDSD1_a || SendGF1_a) -> NewTORDone)
assert NEW_DO_NOT_SEND_TWICE = ((NewTORDone -> !SendTOR_a) &&
					 (QADone -> !SendDSD1_a) && (Finished -> !SendGF1_a))

ltl_property P_NEW_TOR_POLICY = []NEW_TOR_POLICY
ltl_property P_NEW_DO_NOT_SEND_TWICE = []NEW_DO_NOT_SEND_TWICE

controller ||NewController = NewEnvironment~{NewSpec}.
||NewEnvironmentAndController = (NewEnvironment || NewController).

controllerSpec NewSpec= {
    safety = {P_INIT_POLICY, P_NEW_TOR_POLICY, P_QA_POLICY, P_END_POLICY, P_NEW_DO_NOT_SEND_TWICE}
    controllable = {NewControllableActions}
}


// ---------------------------UPDATING CONTROLLER SPEC-----------------------------
//Updating controller fluents
fluent InTransition = <stopOldSpec, startNewSpec> 
fluent StopOldSpec = <stopOldSpec, beginUpdate>
fluent StartNewSpec= <startNewSpec, beginUpdate>
fluent Reconfigure = <reconfigure, beginUpdate>

//ltl_property T = ()

updatingController UpdCont = {
    oldController = EnvironmentAndController,
    oldEnvironment = OldEnvironment,
    hatEnvironment = OldEnvironment,
    newEnvironment = NewEnvironment,
    oldGoal = OldSpec, 
    newGoal = NewSpec,
    // T = True is executed if no transition requirement is set
	//transition = T,
	nonblocking,
    updateFluents = {Initiated, OldTORDone, QADone, Finished, NewTORDone,
		InitA_a, SendQA_a, SendTOR_a, SendDSD1_a, SendGF1_a, EndA_a, SendTORQA_a, TorQaOk0_a, TorQaOk1_a,
        TorOk0_a, TorOk1_a, Dsd1Ok0_a, Dsd1Ok1_a, QaOk0_a, QaOk1_a, AdjustGF1_a, ApproveGF1_a, CancelGF1_a}
}

||UPDATE_CONTROLLER = UpdCont.

// ---------------------------TEST AND RESULTS-----------------------------
assert S_OLD = (INIT_POLICY && OLD_TOR_POLICY && QA_POLICY && END_POLICY && OLD_DO_NOT_SEND_TWICE)
assert S_NEW = (INIT_POLICY && NEW_TOR_POLICY && QA_POLICY && END_POLICY && NEW_DO_NOT_SEND_TWICE)

assert TEST_FORMULA1 = [](!StopOldSpec -> S_OLD)
assert TEST_FORMULA2 = [](StartNewSpec -> S_NEW)
assert TEST_FORMULA3 = [](beginUpdate -> (<>stopOldSpec && <>startNewSpec && <>reconfigure))

