set Alphabet = {cook, finishedCooking, cooking, moveToBelt, /*overHeated,*/ idle}
set Controllable = {idle, cook, moveToBelt}

BISCOTTI = (idle->BISCOTTI | cook->COOKING),
COOKING = (cooking->COOKING | finishedCooking->FINISHED | cook-> STOP/*OVERHEATED | overHeated->OVERHEATED*/), 
FINISHED = (cook->COOKING | moveToBelt->BISCOTTI).//, 
//OVERHEATED = (overHeated->OVERHEATED).

fluent F_Cooking = <cook, finishedCooking>
fluent F_FinishCooking = <finishedCooking, Alphabet\{finishedCooking}>
fluent F_MoveToBelt = <moveToBelt, Alphabet\{moveToBelt}>
fluent F_OverHeated = <overHeated, Alphabet\{overHeated}> 

//assert MoveToBelt = F_MoveToBelt
assert MOVE_TO_BELT = F_MoveToBelt
assert TRUE = (F_MoveToBelt || !F_MoveToBelt)

assert NOT_COOKING = !F_Cooking
assert FinishCooking = F_FinishCooking

SUCCESSFULLY_COOKED_TWICE = (cook->cook->moveToBelt->SUCCESSFULLY_COOKED_TWICE). 
//ltl_property NotOverHeated = [] (!(F_OverHeated))+{Alphabet}

starenv ||ACTUAL_GAME = (SUCCESSFULLY_COOKED_TWICE || BISCOTTI).// || NotOverHeated).
//starenv ||BIS = BISCOTTI.
//controllers
controller ||C = (BISCOTTI)~{G1}.
plant ||PLANT = (BISCOTTI)~{G1}.
//checkCompatibility ||Comp = (BISCOTTI)~{G1}.

//Goals
goal G1 = {
//       safety = {SUCCESSFULLY_COOKED_TWICE}//, NotOverHeated}
       assume = {NOT_COOKING}
       guarantee = {MOVE_TO_BELT}
       controllable = {Controllable}
}
