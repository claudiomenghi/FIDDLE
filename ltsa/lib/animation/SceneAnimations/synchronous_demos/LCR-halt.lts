//leader election in a synchronous ring - with halting

set      UID  = {[5],[7],[9],[8]}
const    N    = #UID
set      M    = {null, halt, msg.UID}
set Status    = {unknown, leader, notleader}

//links or channels hold at most a single message
CHAN  = (put[m:M] -> get[m] -> CHAN).

//the synchronous model proceeds in two steps
ROUND = (step1 -> step2 -> ROUND).

//the processes
PROCESS(U=1) 
  = (init[U]->STATE['unknown]['msg[U]]),
STATE[status:Status][send:M]
  = (step1 -> put[send] -> STATE[status][send]
    |step2 -> 
      (get.null  -> DSTATE[status]['null]
      |get.halt  -> if (status=='unknown) then DSTATE['notleader]['halt] else DSTATE[status]['null]
      |get.msg[v:UID] ->
       if (v>U) then 
         DSTATE[status]['msg[v]]
       else if (v==U) then
         DSTATE['leader]['halt]
       else
		 DSTATE[status]['null]
       )
    ),
DSTATE[status:Status][send:M]
  = ([send]->[status]->STATE[status][send]).

||LCR = ( ROUND 
        || ONELEADER
        || chan[1..N]:CHAN
        || proc[i:1..N]:PROCESS(@(UID,i-1))
        )/{
        forall[i:1..N] {
           proc[i].get/chan[i].get,
           proc[i].put/chan[i%N+1].put,
           step1/proc[i].step1,
           step2/proc[i].step2
           }
        }.
            
menu RUN = {step1,step2}

property 
  ONELEADER      = (proc[i:1..N].leader -> ELECTED[i]),
  ELECTED[i:1..N]= (proc[i].leader -> ELECTED[i]).

progress
  ELECT[i:1..N]  = {proc[i].leader}

animation RING = "xml/ring.xml"
            actions{
				forall[i:1..N] {
                  proc[i].init[u:UID]/init[i][u],
                  proc[i].leader/leader[i],
				  proc[i].notleader/notleader[i],
                  proc[i][m:M]/display[i][m], 
                  proc[i].put.{msg[UID],halt}/channel[i%N+1].begin,
                  proc[i].put.null/channel[i%N+1].null
                }
            }
            controls {
               step1/start_round,
               step2/{channel[1..N].end}
            }


                     
