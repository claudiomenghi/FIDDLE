//leader election in a general synchronous ring
const True = 1
const False = 0
range Bool  = False..True

set      UID  = {[3],[13],[12],[7],[19]}
const    N    = #UID
range    ID   = 1..N
set      M    = {UID}

const Diam = 4 //should be 4
range Int =  0..Diam

//links or channels hold at most a single message
set Network = {[1][2], [2][3], [2][5], [5][3], [3][4], [4][1]}

CHAN(Ch='[0][0])  =(put[Ch][m:M] -> get[Ch][m] -> CHAN).

ALLOW = (get.Network.M->ALLOW)+{get[ID][ID][M]}.

||NETWORK = (forall[ch:Network] CHAN(ch) || ALLOW)
            /{forall[i:ID] {put[i]/put[i][ID]}}.

//the synchronous model proceeds in two steps
ROUND = (step1 -> step2 -> ROUND).

//the processes
PROCESS(Id=1,U=19) 
  = (start->init[Id][U]->step1->MSGS[U][0][True]),
MSGS[max:UID][rounds:Int][b:Bool]
  = (when b  put[Id][max] -> step2 -> TRANS[max][rounds+1][False]
    |when !b step2 -> TRANS[max][rounds+1][b]),
TRANS[max:UID][rounds:Int][b:Bool]
  = (get[ID][Id][m:UID] 
     -> if (m>max) then
           (display[Id][m]->TRANS[m][rounds][True])
        else
           (display[Id][max]->TRANS[max][rounds][b])
    |step1 -> if (rounds==Diam) then LEADER[max] else MSGS[max][rounds][b]
    ),
LEADER[max:UID]
  = if (max == U) then
       (leader[Id] -> STOP)
    else
       (notleader[Id] -> STOP).

||SYS = (forall[i:ID] PROCESS(i,@(UID,i-1)) || NETWORK)>>{step1,step2}.

property 
  ONELEADER      = (leader[i:ID] -> ELECTED[i]),
  ELECTED[i:1..N]= (leader[i] -> ELECTED[i]).


menu RUN = {step1,step2,start}

animation NETWORK = "xml/network.xml"
            actions{
				forall[i:1..N] {
                  init[i][u:UID]/display[i][u],
                  leader[i]/leader[i],
                  notleader[i]/notleader[i],
                  display[i][m:UID]/display[i][m], 
                  put[i][UID]/chan[i][ID].begin
  				}
            }
            controls {
               start/init,
               step1/round,         
               step2/{chan.Network.end}
            }


                     
