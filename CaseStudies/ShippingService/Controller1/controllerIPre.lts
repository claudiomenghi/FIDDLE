// This model contains the shipping service with the CONTROLLER.
// The preconditions of the CONTROLLER are described.

//***************************************************************************************************
// ENVIRONMENT
//***************************************************************************************************

set User = {userReq, offerRcvd, usrAck, usrNack, respOk, reqCancelled}
set Producer = {prodInfoReq, infoRcvd, prodReq, prodCancel}
set Shipper = {shipInfoReq, costAndTime, shipReq, shipCancel}
set A = {User, Producer, Shipper}


PRODUCER 	= 						(	prodInfoReq	->	REQUESTED		), 
					REQUESTED 	  = (	infoRcvd	->	ORDER_PENDING	),
					ORDER_PENDING = (	prodReq		->	PRODUCER 
										| 
										prodCancel	->	PRODUCER		).

 
SHIPPER 	= 						   (	shipInfoReq	->	REQUESTED		), 
					REQUESTED	 	 = (	costAndTime	->	SHIPPING_PENDING),
					SHIPPING_PENDING = (	shipReq		->	SHIPPER 
											| 
											shipCancel	->	SHIPPER			).


USER = 									(	userReq		->	REQUESTED		), 
					REQUESTED 		  = (	offerRcvd	->	ACK_NACK		),
					ACK_NACK 		  = (	usrAck		->	ACKD 
											| 
											usrNack		->reqCancelled->USER), 
					ACKD 			  = (	respOk		->	USER			).


||Environment = (USER || SHIPPER || PRODUCER).


 
//***************************************************************************************************
// CONTROLLER
//***************************************************************************************************
CONTROLLER =	INIT,
				INIT 			= 	(	userReq -> 	MANAGEREQUEST 	),
				box MANAGEREQUEST 	= 	(	respOk 	-> 	INIT	
										|
										reqCancelled -> INIT		
									)[A\{userReq,respOk,reqCancelled}].


|| System = (Environment || CONTROLLER).

//***************************************************************************************************
// REQUIREMENTS
//***************************************************************************************************

// requirement 1
// 1 the purchase and delivery must only check for some product or shipping info if the user has placed an order.
// the system should not query the services if no user request is received
assert CHECK_PRODUCT = []((F_ShipInfoReq || F_ProdInfoReq) -> F_UserReq)
// expected: NOT OK
// returned: NOT OK

// requirement 2
// 2 an offer is provided to the user only if the furniture and shipping services have confirmed the availability
assert CHECK_OFFER	=	[](F_OfferRcvd -> (F_CostAndTime && F_InfoRcvd))
// expected: NOT OK
// returned:  NOT OK

// requirement 3
// 3 the furniture and the shipping requirements are activated only if the user has decided to purchase
assert FURNITURE_AND_SHIPPING_IF_PURCHASE =	[]((F_ShipReq || F_ProdReq) -> F_UsrAck)
// expected: NOT OK
// returned:  NOT OK

// requirement 4
// 4 the purchase and delivery system allows canceling an order only if the user canceled the order
assert ORDER_CANCELING= []((F_ProdCancel || F_ShipCancel) -> F_ReqNacked)
// expected: NOT OK
// returned:  NOT OK


// requirement 5
// 5 a request is marked as canceled when both the product ordering and the shipping services have canceled the request
assert CANCELING_AN_ORDER=[](F_ReqCancelled -> (F_ProdCancelled && F_ShipCancelled))
// expected: NOT OK
// returned: NOT OK


// requirement 6
// 6 the purchase and delivery system finishes successfully only when both the product ordering and the shupping service have handled correctly their requests
assert FINISH_SUCCESS=[](F_RespOk -> (F_ProdRequested && F_ShipRequested))
// expected: NOT OK
// returned:  NOT OK


// requirement 7
// 7 the controller should guarantee that infinitely many producs are shipped, the service does not stop its execution
assert  INFINITE_SHIPPING= [](F_RespOk)
// expected: NOT OK
// returned: NOT OK




//***************************************************************************************************
// FLUENTS
//***************************************************************************************************
fluent F_RespOk = <respOk, A\{respOk}>	initially False
fluent F_ShipInfoReq = <shipInfoReq, A\{shipInfoReq}> initially False
fluent F_ProdInfoReq = <prodInfoReq, A\{prodInfoReq}> initially False
fluent F_UserReq = <userReq, offerRcvd> initially False
fluent F_OfferRcvd = <offerRcvd, A\{offerRcvd}> initially False
fluent F_CostAndTime = <costAndTime, {shipReq,usrNack}> initially False
fluent F_InfoRcvd = <infoRcvd, {prodReq,usrNack}> initially False
fluent F_ShipReq = <shipReq, A\{shipReq}> initially False
fluent F_ProdReq = <prodReq, A\{prodReq}> initially False
fluent F_UsrAck = <usrAck, respOk> initially False
fluent F_JustUsrAck = <usrAck, A\{usrAck}>  initially False
fluent F_ShipCancel = <shipCancel, A\{shipCancel}> initially False
fluent F_ProdCancel = <prodCancel, A\{prodCancel}>  initially False
fluent F_ShipCancelled = <shipCancel, shipInfoReq> initially False
fluent F_ProdCancelled = <prodCancel, prodInfoReq>  initially False
fluent F_ReqCancelled = <reqCancelled, A\{reqCancelled}> initially False
fluent F_ReqJustCancelled = <reqCancelled, A\{reqCancelled}> initially False
fluent F_ReqNacked = <usrNack, reqCancelled> initially False
fluent F_ShipRequested = <shipReq, shipInfoReq> initially False
fluent F_ProdRequested = <prodReq, prodInfoReq> initially False
fluent F_JustUsrNack = <usrNack, A\{usrNack}> initially False 
fluent F_OfferAck = <offerRcvd, usrAck> initially False



//***************************************************************************************************
// ADDITIONAL CONSTANTS
//***************************************************************************************************
const False = 0
const True = 1

//***************************************************************************************************
// PRECONDITIONS
//***************************************************************************************************
// the MANAGEREQUEST black box state can be entered only if there is a pending request
// violated since when I left the box there is no guarantee that respOk or reqCanceled occurs.
// Then, I can re-enter the box by making the precondition violated.
// POSTCONDITIONS must be considered as well!
ltl_precondition CONTROLLER MANAGEREQUEST MANAGE_REQUEST_REQUIRES_PENDING_REQUEST=<>(F_UserReq && !<>(F_RespOk || F_ReqCancelled))




