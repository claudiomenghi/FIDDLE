// This model contains the shipping service with the CONTROLLER.
// The controller interface is specified.
// The pre and post conditions of the boxes are not described
// As expected, without the specification of the pre and post conditions the requirements are not satisfied

//***************************************************************************************************
// ENVIRONMENT
//***************************************************************************************************

set User = {userReq, offerRcvd, usrAck, usrNack, respOk, reqCancelled}
set Producer = {prodInfoReq, infoRcvd, prodReq, prodCancel}
set Shipper = {shipInfoReq, costAndTime, shipReq, shipCancel}
set A = {User, Producer, Shipper}


PRODUCER 	= 						(	prodInfoReq	->	REQUESTED		), 
					REQUESTED 	  = (	infoRcvd	->	ORDER_PENDING	),
					ORDER_PENDING = (	prodReq		->	PRODUCER 
										| 
										prodCancel	->	PRODUCER		).

 
SHIPPER 	= 						   (	shipInfoReq	->	REQUESTED		), 
					REQUESTED	 	 = (	costAndTime	->	SHIPPING_PENDING),
					SHIPPING_PENDING = (	shipReq		->	SHIPPER 
											| 
											shipCancel	->	SHIPPER			).


USER = 									(	userReq		->	REQUESTED		), 
					REQUESTED 		  = (	offerRcvd	->	ACK_NACK		),
					ACK_NACK 		  = (	usrAck		->	ACKD 
											| 
											usrNack		->reqCancelled->USER), 
					ACKD 			  = (	respOk		->	USER			).


||Environment = (USER || SHIPPER || PRODUCER).


 
//***************************************************************************************************
// CONTROLLER
//***************************************************************************************************
CONTROLLER =	INIT,
				INIT 			= 	(	userReq -> 	MANAGEREQUEST 	),
				box MANAGEREQUEST 	= 	(	respOk 	-> 	INIT	
										//|
										//reqCancelled -> INIT		
									)[A\{userReq,respOk}].
									


|| PartialComponent=CONTROLLER.
|| System = (Environment || CONTROLLER).

//***************************************************************************************************
// REQUIREMENTS
//***************************************************************************************************

// requirement 1
// 1 the purchase and delivery must only check for some product or shipping info if the user has placed an order.
// the system should not query the services if no user request is received
assert P1 = ([](((F_ShipInfoReq || F_ProdInfoReq) -> (F_UsrReq))) && <>F_UsrAck && [](F_UsrAck->!<>F_ReqCancelled) && [](F_UsrAck-><>F_RespOk))
// returned: NOT OK

// requirement 2
// 2 an offer is provided to the user only if the furniture and shipping services have confirmed the availability
assert P2	=	[](F_OfferRcvd -> (<>(F_CostAndTime) && (<>F_InfoRcvd)))
// returned: OK

// requirement 3
// 3 the furniture and the shipping requirements are activated only if the user has decided to purchase
assert P3 =	(
				([]((!F_ShipReq)U F_UsrAck))
				&&
				([]((!F_ProdReq)U F_UsrAck))
			)
// returned: OK

// requirement 4
// 4 the purchase and delivery system allows canceling an order only if the user canceled the order
assert P4= []((F_ProdCancel || F_ShipCancel) -> F_ReqNacked)
// returned: OK


// requirement 5
// 5 a request is marked as canceled when both the product ordering and the shipping services have canceled the request
assert P5=[](F_ReqCancelled -> <>(F_ProdCancelled && F_ShipCancelled))
// returned: OK


// requirement 6
// 6 the purchase and delivery system finishes successfully only when both the product ordering and the shupping service have handled correctly their requests
assert P6=[](F_RespOk -> (F_ProdRequested && F_ShipRequested))
// returned: OK


// requirement 7
// 7 the controller should guarantee that infinitely many producs are shipped, the service does not stop its execution
assert P7= [](<>F_RespOk)
// returned: OK


assert P8= ([](<>F_RespOk)&&[](<>F_ReqCancelled))
//***************************************************************************************************
// FLUENTS
//***************************************************************************************************
fluent F_RespOk = <respOk, A\{respOk}>	initially False
fluent F_ShipInfoReq = <shipInfoReq, A\{shipInfoReq}> initially False
fluent F_ProdInfoReq = <prodInfoReq, A\{prodInfoReq}> initially False
fluent F_UsrReq = <userReq, offerRcvd> initially False
fluent F_OfferRcvd = <offerRcvd, A\{offerRcvd}> initially False
fluent F_CostAndTime = <costAndTime, A\{costAndTime}> initially False
fluent F_InfoRcvd = <infoRcvd, A\{infoRcvd}> initially False
fluent F_ShipReq = <shipReq, A\{shipReq}> initially False
fluent F_ProdReq = <prodReq, A\{prodReq}> initially False
fluent F_UsrAck = <usrAck, A\{usrAck}> initially False
fluent F_ShipCancel = <shipCancel, A\{shipCancel}> initially False
fluent F_ProdCancel = <prodCancel, A\{prodCancel}>  initially False
fluent F_ShipCancelled = <shipCancel, A\{shipCancel}> initially False
fluent F_ProdCancelled = <prodCancel, A\{prodCancel}>  initially False
fluent F_ReqCancelled = <reqCancelled, A\{reqCancelled}> initially False
fluent F_ReqJustCancelled = <reqCancelled, A\{reqCancelled}> initially False
fluent F_ReqNacked = <usrNack, reqCancelled> initially False
fluent F_ShipRequested = <shipReq, shipInfoReq> initially False
fluent F_ProdRequested = <prodReq, prodInfoReq> initially False
fluent F_JustUsrNack = <usrNack, A\{usrNack}> initially False 
fluent F_OfferAck = <offerRcvd, usrAck> initially False
fluent F_End = <end, A> initially False

ltl_postcondition CONTROLLER MANAGEREQUEST REQUESTED_PRODUCT_OR_DECLINED_REQUEST=(	(<>(F_ProdReq)&&<>(F_ShipReq))
																					&&
																					// P1
																				  	//([](((F_ShipInfoReq || F_ProdInfoReq) -> (F_UsrReq))) && <>F_UsrAck && [](F_UsrAck->!<>F_ReqCancelled) && [](F_UsrAck-><>F_RespOk))
																					// P2
																					([](F_OfferRcvd -> ((<>F_CostAndTime)&&(<>F_InfoRcvd))))
																					&&
																					// P3
																					([]((!F_ShipReq)U F_UsrAck))
																					&&
																					([]((!F_ProdReq)U F_UsrAck))
																				 )

//***************************************************************************************************
// ADDITIONAL CONSTANTS
//***************************************************************************************************
const False = 0
const True = 1
