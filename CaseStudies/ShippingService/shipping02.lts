// This model contains the shipping service with the CONTROLLER.
// The controller interface is specified.
// The pre and post conditions of the boxes are not described
// As expected, without the specification of the pre and post conditions the requirements are not satisfied

//***************************************************************************************************
// ENVIRONMENT
//***************************************************************************************************

set User = {userReq, offerRcvd, usrAck, usrNack, respOk, reqCancelled}
set Producer = {prodInfoReq, infoRcvd, prodReq, prodCancel}
set Shipper = {shipInfoReq, costAndTime, shipReq, shipCancel}
set A = {User, Producer, Shipper}


PRODUCER 	= 						(	prodInfoReq	->	REQUESTED		), 
					REQUESTED 	  = (	infoRcvd	->	ORDER_PENDING	),
					ORDER_PENDING = (	prodReq		->	PRODUCER 
										| 
										prodCancel	->	PRODUCER		).

 
SHIPPER 	= 						   (	shipInfoReq	->	REQUESTED		), 
					REQUESTED	 	 = (	costAndTime	->	SHIPPING_PENDING),
					SHIPPING_PENDING = (	shipReq		->	SHIPPER 
											| 
											shipCancel	->	SHIPPER			).


USER = 									(	userReq		->	REQUESTED		), 
					REQUESTED 		  = (	offerRcvd	->	ACK_NACK		),
					ACK_NACK 		  = (	usrAck		->	ACKD 
											| 
											usrNack		->reqCancelled->USER), 
					ACKD 			  = (	respOk		->	USER			).


||Environment = (USER || SHIPPER || PRODUCER).


 
//***************************************************************************************************
// COMPONENTS
//***************************************************************************************************
COMPONENT1 =	INIT,
				INIT 			= 	(	userReq -> 	MANAGEREQUEST 	),
				box MANAGEREQUEST 	= 	(	respOk 	-> 	INIT	
										//|
										//reqCancelled -> INIT		
									)[A\{userReq,respOk}].
									

set PreparingOfferInterface={prodInfoReq, infoRcvd, shipInfoReq, costAndTime}

set ManageRequestInterface={prodReq, shipReq}
set DeclineRequestInterface={prodCancel, shipCancel}

COMPONENT2 =	INIT,
				INIT 				= 	(	userReq 	-> 	PREPARINGOFFER 				),
				box PREPARINGOFFER	= 	(	offerRcvd 	->	WAITINGFORUSERCHOICE 		
										)[PreparingOfferInterface],	
				WAITINGFORUSERCHOICE=	(	usrAck		->	MANAGEREQUEST
											|
											usrNack		-> 	DECLINEREQUEST
										),
				box	MANAGEREQUEST	=	(	respOk 		-> 	INIT	
										)[ManageRequestInterface],
				box DECLINEREQUEST	=	( 	reqCancelled -> INIT	
										)[DeclineRequestInterface].



// experiment 1
|| PartialComponent1=COMPONENT1.

// experiment 2 (comment the post-conditions)
// experiment 3 (uncomment the post-conditions)
|| PartialComponent2=COMPONENT2.


|| System = (Environment || CONTROLLER).

//***************************************************************************************************
// REQUIREMENTS
//***************************************************************************************************
assert P1 = (! ( (!F_UsrReq) U (F_ShipInfoReq || F_ProdInfoReq) ) )

assert P2	=[](F_UsrReq->( ! ( (!F_InfoRcvd) U F_OfferRcvd)))

assert P3 =	[](F_UsrReq->(!((!F_UserAck) W F_ShipReq)) && (!(!(F_UserAck) W F_ProdReq)) )
assert P3a =	[](F_UsrReq->(!((!F_UserAck) W F_ShipReq)&&<>F_ShipReq))
assert P3b =	[](F_UsrReq->(!(!(F_UserAck) W F_ProdReq)) &&<>F_ProdReq)

assert P4=[](F_UsrReq->(!((!(F_UserNack) W (F_ProdCancel || F_ShipCancel)))))

assert P4a=[](F_UsrReq->(!((!(F_UserNack) W (F_ProdCancel)))&&<>F_ProdCancel))
assert P4b=[](F_UsrReq->(!((!(F_UserNack) W (F_ShipCancel)))&&<>F_ShipCancel))


assert P5=[]( F_UsrReq->(!((!(F_ProdCancelled) W F_ReqCancelled)) && !((!(F_ShipCancelled) W F_ReqCancelled))))
assert P5a=[]( F_UsrReq->(!((!(F_ProdCancelled) W F_ReqCancelled))&&<>F_ReqCancelled))
assert P5b=[]( F_UsrReq->(!(!(F_ShipCancelled) W F_ReqCancelled)&&<>F_ReqCancelled))


assert P6=[]( (F_UserAck-> <>F_RespOk) && (F_UserNack-> <>F_ReqCancelled) &&<>F_UserAck &&<>F_UserNack)
assert P6a=[]( (F_UserAck-> <>F_RespOk) && <>F_UserAck )
assert P6b=[]( (F_UserNack-> <>F_ReqCancelled) &&<>F_UserNack)
assert P7= ([]((F_ReqCancelled-><>F_UsrReq)&&<>F_ReqCancelled))



//***************************************************************************************************
// FLUENTS
//***************************************************************************************************
fluent F_RespOk = <respOk, A\{respOk}>	initially False
fluent F_ShipInfoReq = <shipInfoReq, A\{shipInfoReq}> initially False
fluent F_ProdInfoReq = <prodInfoReq, A\{prodInfoReq}> initially False
fluent F_UsrReq = <userReq, A\{userReq}> initially False
fluent F_OfferRcvd = <offerRcvd, A\{offerRcvd}> initially False
fluent F_CostAndTime = <costAndTime, A\{costAndTime}> initially False
fluent F_InfoRcvd = <infoRcvd, A\{infoRcvd}> initially False
fluent F_ShipReq = <shipReq, A\{shipReq}> initially False
fluent F_ProdReq = <prodReq, A\{prodReq}> initially False

fluent F_UserNack = <usrNack, A\{usrNack}> initially False
fluent F_UserAck = <usrAck, A\{usrAck}> initially False
fluent F_ShipCancel = <shipCancel, A\{shipCancel}> initially False
fluent F_ProdCancel = <prodCancel, A\{prodCancel}>  initially False
fluent F_ShipCancelled = <shipCancel, A\{shipCancel}> initially False
fluent F_ProdCancelled = <prodCancel, A\{prodCancel}>  initially False
fluent F_ReqCancelled = <reqCancelled, A\{reqCancelled}> initially False
fluent F_ReqNacked = <usrNack,  A\{usrNack}> initially False
fluent F_ShipRequested = <shipReq, A\{shipReq}> initially False
fluent F_ProdRequested = <prodReq, A\{prodReq}> initially False
fluent F_OfferAck = <offerRcvd, A\{offerRcvd}> initially False
fluent F_End = <end, A> initially False

ltl_postcondition COMPONENT2 PREPARINGOFFER REQUESTED_PRODUCT_OR_DECLINED_REQUEST=(<>(F_InfoRcvd))
																					//&&
																					// P1
																				  	//([](((F_ShipInfoReq || F_ProdInfoReq) -> (F_UsrReq))) && <>F_UsrAck && [](F_UsrAck->!<>F_ReqCancelled) && [](F_UsrAck-><>F_RespOk))
																					// P2
//																					([](F_OfferRcvd -> ((<>F_CostAndTime)&&(<>F_InfoRcvd))))
//																					&&
																					// P3
//																					([]((!F_ShipReq)U F_UsrAck))
//																					&&
//																					([]((!F_ProdReq)U F_UsrAck))
//																				 )

ltl_postcondition COMPONENT2 MANAGEREQUEST CORRECTLY_MANAGE_REQUEST=(<>F_ShipReq)

//***************************************************************************************************
// ADDITIONAL CONSTANTS
//***************************************************************************************************
const False = 0
const True = 1
