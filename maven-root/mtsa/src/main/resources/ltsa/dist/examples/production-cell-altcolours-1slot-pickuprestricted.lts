const MAX = 8
range Count = 0..MAX

//ACTION SETS
set Colours = {yellow, red}
set Tools = {drill}
set GetLocations = {drill, paint, in}
set PutLocations = {drill, paint, out, trash}
set Puts = {putdownat.PutLocations.Colours}
set Gets = {pickupfrom.GetLocations.Colours}
set PutsSF = {putdownat_success.PutLocations.Colours}
set GetsSF = {pickupfrom_success.GetLocations.Colours, pickupfrom_fail.GetLocations.Colours}
set A = {Puts, Gets, PutsSF, GetsSF, ready.Tools.Colours, ready.paint.Colours, supply.Colours}
set CA = {Puts,Gets}

//Domain Model
PAINT = (putdownat_success['paint][Colours]
		->COLORING), 
COLORING = (ready['paint]['red]
	->pickupfrom_success['paint]['red]->PAINT)
+{ready['paint]['yellow],
pickupfrom_success['paint]['yellow]}.
TOOL(T='any)=(putdownat_success[T][c:Colours]
	->ready[T][c]->pickupfrom_success[T][c]->TOOL). 
||TOOLS = (forall[t:Tools] TOOL(t)).
ARM = (pickupfrom[l:GetLocations][c:Colours]
	->GET_RESULT[l][c]), 
GET_RESULT[l:GetLocations][c:Colours]=
		(pickupfrom_success[l][c]->PICKED_UP[c] 
		| pickupfrom_fail[l][c]->ARM),
PICKED_UP[c:Colours]=(putdownat[l:PutLocations][c]
		->putdownat_success[l][c]-> ARM).
SUPPLY = (supply[c:Colours]
		->pickupfrom_success['in][c]->SUPPLY).
||SUPPLIER = SUPPLY.
FORCE_PICKUP=(supply['yellow]->COUNT[0] 
			| A\{supply['yellow]}->FORCE_PICKUP),
COUNT[id:Count] = (A\{pickupfrom['in]['yellow]}
				->COUNT[id+1] 
		 |pickupfrom['in]['yellow]->FORCE_PICKUP),
COUNT[MAX+1] = (pickupfrom['in]['yellow]
				->FORCE_PICKUP).
||ENV = (SUPPLIER || PAINT || TOOLS 
		   || ARM || FORCE_PICKUP).


//DEFINED FLUENTS 
//The ending action needs to be getInTray, so the controller can't postpone an element indefinitely
fluent F_COLOUR_PUT[l:PutLocations][c:Colours] = <putdownat_success[l][c], A\{putdownat_success[l][c]}>



assert FAILED_PICKUPS = FFAILED_PICKUPS

fluent F_PAINT = <putdownat_success['paint][Colours], putdownat_success['out][Colours]>
fluent F_HAVE_DRILLED = <ready['drill][Colours], putdownat_success['out][Colours]>
fluent F_SUPPLY_YELLOW = <supply['yellow], pickupfrom_success['in]['yellow]>//A\{supply['yellow]}>
fluent NON_EMPTY_SUPPLY = <supply[Colours], pickupfrom_success['in][Colours]>
fluent PICKED_IN = <pickupfrom_success['in][Colours], A\{pickupfrom_success['in][Colours]}>


assert TRY_TO_PICK_UP = TRY_PICK_UP['in][c:Colours]

//PICKUP PRECONDITIONS
fluent TRY_PICK_UP[l:GetLocations][c:Colours] = <pickupfrom[l][c], A\{pickupfrom[l][c]}>
fluent LOC_FULL[l:Tools][c:Colours] = <putdownat_success[l][c], pickupfrom_success[l][c]>
fluent LOC_IN_FULL[c:Colours] = <supply[c], pickupfrom_success['in][c]>
fluent LOC_PAINT_FULL_RED = <{putdownat_success['paint]['red], ready['paint]['red]}, pickupfrom_success['paint]['red]>
fluent LOC_PAINT_FULL_YELLOW = <putdownat_success['paint]['yellow], {pickupfrom_success['paint]['yellow], ready['paint]['red]}>

set GetLocs = {GetLocations\{in}}

//ltl_property EMPTY_THEN_YELLOW = (EMPTY_SUPPLY -> X F_SUPPLY_YELLOW)
fluent F_HAVE_DRILLED_C[c:Colours] = <ready['drill][c], putdownat_success['out][c]>

||TEST = (DM || TOOL_ORDER || PICK_IN_PRE || PICK_TOOLS_PRE || PICK_PAINT_YELLOW_PRE || PICK_PAINT_RED_PRE).


ltl_property PICK_TOOLS_PRE = forall[t:Tools][c:Colours] [] (TRY_PICK_UP[t][c] -> LOC_FULL[t][c])
ltl_property PICK_PAINT_YELLOW_PRE = [] (TRY_PICK_UP['paint]['yellow] -> LOC_PAINT_FULL_YELLOW)
ltl_property PICK_PAINT_RED_PRE = [] (TRY_PICK_UP['paint]['red] -> LOC_PAINT_FULL_RED)
ltl_property PICK_IN_PRE = forall[c:Colours] [] (TRY_PICK_UP['in][c] -> LOC_IN_FULL[c])

set FAILURE_SET = {pickupfrom_fail.GetLocations.Colours}

OUT_PROTOCOL = (putdownat_success['out]['red] 
		-> putdownat_success['out]['yellow] 
		-> OUT_PROTOCOL).
ltl_property TOOL_ORDER = 
		[] (F_PAINT -> F_HAVE_DRILLED)
||PICK_UP_IF_OBJECT_PRESENT = 
					(PICK_IN_PRE 
					|| PICK_PAINT_RED_PRE 
					|| PICK_PAINT_YELLOW_PRE 
					|| PICK_TOOLS_PRE).
fluent FFAILED_PICKUPS = 
			<FAILURE_SET, A\{FAILURE_SET}>
assert YELLOW_IN = F_SUPPLY_YELLOW
assert RED_OUT = F_COLOUR_PUT['out]['red]
controllerSpec RED_YELLOW = {
	safety = {OUT_PROTOCOL,	
			TOOL_ORDER, 
			PICK_UP_IF_OBJECT_PRESENT}
	failure = {FAILED_PICKUPS}
	assumption = {YELLOW_IN}
	liveness = {RED_OUT}
	controllable = {CA}
}
controller ||C = (ENV)~{RED_YELLOW}.
checkCompatibility ||COMP = (ENV)~{RED_YELLOW}.

