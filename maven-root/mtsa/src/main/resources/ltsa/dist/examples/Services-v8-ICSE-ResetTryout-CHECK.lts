set AvailableServices = {car, flight}//, hotel}
set Agency = {agency.{req, resp, idle}}
set Network = {yesNetwork, noNetwork}
set ControllableC1 = {AvailableServices.{buy, query, reserve, reset}}
set Controllable = {{ControllableC1}, agency.resp}
set FailureSet = {AvailableServices.{queryFail, reserveFail, buyFail}}
set Uncontrollable = {agency.{req, idle}, FailureSet, AvailableServices.{querySuccess, reserveSuccess, buySuccess}}
set A = {Controllable, Uncontrollable, Agency, Network}


//Environment model
SERVICE(SRV='car) = IDLE,
IDLE = ([SRV].query -> ( [SRV].queryFail -> IDLE | [SRV].querySuccess -> RESULTSET) ),
RESULTSET = ([SRV].reset -> IDLE | [SRV].reserve -> ([SRV].reserveFail -> IDLE | [SRV].reserveSuccess -> RESERVED)),
RESERVED = ([SRV].buy -> ([SRV].buyFail -> IDLE | [SRV].buySuccess -> IDLE) ).

||SERVICES = (forall[srv:AvailableServices] SERVICE(srv)).

AGENCY = (agency.idle-> AGENCY | agency.req->agency.resp->AGENCY).

||ENV = (forall[srv:AvailableServices] SERVICE(srv) || AGENCY || NETWORK).


NETWORK = NO, 
YES = ({Controllable,Uncontrollable} -> YES | noNetwork -> NO),
NO = (yesNetwork -> {Controllable,Uncontrollable} -> YES).


//fluent definitions
fluent F_UsrReq = <agency.req, A\{agency.req}>
fluent F_AgencyReq = <agency.resp, A\{agency.resp}>
fluent F_Failures = <FailureSet, A\{FailureSet}>
//DESDE ACA 
fluent F_Reserved[srv:AvailableServices] = <[srv].reserveSuccess, {[srv].buySuccess, [srv].buyFail}> //{agency.req, [srv].buyFail}
fluent F_BuySuccessfully[srv:AvailableServices] = <[srv].buySuccess, A\{[srv].buySuccess}>
fluent F_Query[srv:AvailableServices] = <[srv].query, A\{[srv].query}>
fluent F_BoughtSuccessfully[srv:AvailableServices] = <[srv].buySuccess, agency.req>
fluent F_TryToBuy[srv:AvailableServices] = <[srv].buy, A\{[srv].buy}>
fluent F_PendingReq = <agency.req, agency.resp>
fluent F_SuccessfullyFound[srv:AvailableServices] = <[srv].querySuccess, {[srv].{reserveFail, buyFail, reset}}>
fluent F_TryToReserve[srv:AvailableServices] = <[srv].reserve, A\{[srv].reserve}>
fluent F_TryingToReserve[srv:AvailableServices] = <[srv].reserve, [srv].{reserveSuccess, reserveFail}>
fluent F_ReserveFailed[srv:AvailableServices] = <[srv].reserveFail, [srv].query>
fluent F_QueryFailed[srv:AvailableServices] = <[srv].queryFail, [srv].query>
fluent F_Reset[srv:AvailableServices] = <[srv].reset, A\{[srv].reset}>
fluent F_Querying[srv:AvailableServices] = <[srv].query, {[srv].{queryFail,reset,reserve}}>
fluent F_Resetting[srv:AvailableServices] = <{{{AvailableServices}.{queryFail}}\{[srv].queryFail}}, {[srv].{reset, queryFail}}>//, queryFail
fluent F_Queried[srv:AvailableServices] = <[srv].query, agency.req>
fluent F_SomethingFailed[srv:AvailableServices] = <[srv].{queryFail, reserveFail, buyFail}, agency.req>
fluent F_NetworkOk = <yesNetwork, noNetwork>

assert InStateTwo(Srv='any) = (F_SuccessfullyFound[Srv] && !F_TryingToReserve[Srv])
assert Resetting(Srv='any) = (InStateTwo(Srv) && (exists[srv:AvailableServices] (F_ReserveFailed[srv] || F_QueryFailed[srv])))

ltl_property QueryImpliesNoResetting = [](forall[srv3:AvailableServices][srv2:AvailableServices](F_Query[srv3] -> !Resetting(srv2)))

/*
QueryImpliesNoResetting = (['car].queryFail-> CAR_FAILURE | ['flight].queryFail-> FLIGHT_FAILURE | {['car].query, ['flight].{reserve, query}}->QueryImpliesNoResetting), 
CAR_FAILURE = ({['car].query, ['flight].{reserve, query}}->ERROR | ['flight].{queryFail, reset}->QueryImpliesNoResetting), 
FLIGHT_FAILURE = ({['flight].query, ['car].{reserve, query}}->ERROR | ['car].{queryFail, reset}->QueryImpliesNoResetting).

||Q = (QueryImpliesNoResetting || ENV).
*/

assert AllBought = forall[srv:AvailableServices](F_BoughtSuccessfully[srv])
assert SomeQuery =  exists[srv:AvailableServices] F_Query[srv]


assert AllReserved = forall[srv:AvailableServices](F_Reserved[srv]) //agregar este y cambiar reserved. 

//a service can book only if the three of them have been successfully found
//ltl_property FoundBeforeReserve = [] (forall[srv:AvailableServices][srv2:AvailableServices] 
//									(F_TryToReserve[srv] -> F_SuccessfullyFound[srv2]))

//if a service fails querying, the others have to be reset.
ltl_property ResetImpliesQueryingFailure = [] (forall[srv:AvailableServices]exists[srv2:AvailableServices] 
										(F_Reset[srv] -> F_QueryFailed[srv2]))

ltl_property SuccessfulyFoundBeforeReserve = [] (forall[srv:AvailableServices][srv2:AvailableServices] 
										(F_TryToReserve[srv] -> (F_SuccessfullyFound[srv2]) ))



//Safety definition
ltl_property ServiceQueryImpliesUsrReq = [](SomeQuery -> F_PendingReq)
ltl_property UsrRspImpliesAllBought = [](F_AgencyReq -> AllBought)
ltl_property QueryImpliesNotBought = [](forall[srv:AvailableServices] (F_Query[srv] -> (!F_BoughtSuccessfully[srv])))
ltl_property ReserveBeforeBuy = [] (forall[srv:AvailableServices][srv2:AvailableServices] (F_TryToBuy[srv] -> (F_BoughtSuccessfully[srv2] || F_Reserved[srv2])))
ltl_property AllFoundBeforeReserve = [](forall[srv:AvailableServices][srv2:AvailableServices] (F_TryToReserve[srv] -> F_SuccessfullyFound[srv2]))

//Goals & Assumptions
assert NetworkOk = F_NetworkOk
assert Failures = F_Failures
assert UsrResp = F_AgencyReq
assert PendingRequests = F_PendingReq

//Controller specifications
controller ||C = ENV~{G1}.
checkCompatibility ||Compatible = ENV~{G1}.

//Defined goals
goal G1 = {
       safety = {ReserveBeforeBuy, UsrRspImpliesAllBought, 
				ServiceQueryImpliesUsrReq, QueryImpliesNotBought,
				SuccessfulyFoundBeforeReserve, ResetImpliesQueryingFailure, 
				QueryImpliesNoResetting, AllFoundBeforeReserve}
       fault = {Failures}
       assume = {NetworkOk, PendingRequests}
       guarantee = {UsrResp}
       controllable = {Controllable}
}

||System = (C || ENV).
||AnalysedEnv = (ENV||ReserveBeforeBuy || UsrRspImpliesAllBought||ServiceQueryImpliesUsrReq||QueryImpliesNotBought||
ResetImpliesQueryingFailure||QueryImpliesNoResetting || AllFoundBeforeReserve).

