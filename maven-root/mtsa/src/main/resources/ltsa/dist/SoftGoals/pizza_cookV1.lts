//ROBOTS
const CantArms = 1
range RangeArms = 1..CantArms
set Arms = {[RangeArms]}

set ArmControl = {getPizzaInTray,getPizzaFromOven,sBuildBox,putPizzaOutTray,sPutInBox,sCooking/*,g*/}
set ArmSenses = {eBuildBox, eCooking, ePutInBox}
set ControllableActions = {[Arms].ArmControl}
set UncontrollableActions = {[Arms].ArmSenses}

set Alphabet = {ControllableActions,UncontrollableActions}


GOAL = ([id:RangeArms].ePutInBox -> g -> GOAL). 


PIZZA_PROCESS = IN_TRAY,
IN_TRAY =  ([id:RangeArms].getPizzaInTray ->  PIZZA_GETTED),
PIZZA_GETTED = ([id:RangeArms].sCooking -> IN_OVEN), 
IN_OVEN = ([id:RangeArms].eCooking ->   READY),
READY = ([id:RangeArms].getPizzaFromOven -> IN_TRAY).

DOUBLE_ARM(C=1) = IDLE, 
IDLE  = ([C].getPizzaInTray ->  PIZZA_GETTED | [C].getPizzaFromOven -> PIZZA_GETTED | [C].sBuildBox -> BUILDING | [C].sPutInBox -> PUTTING), 
PIZZA_GETTED = ([C].sCooking -> IDLE | [C].putPizzaOutTray -> IDLE), 
BUILDING = ([C].eBuildBox -> IDLE), 
PUTTING = ( [C].ePutInBox -> IDLE).

fluent COOKING[id:RangeArms] = <[id].sCooking, /*[id].getPizzaFromOven*/ [id].eCooking>
fluent BUILDING_BOX[id:RangeArms] = <[id].sBuildBox, [id].eBuildBox>

assert ACOOKING = COOKING[1]
assert ABUILDING = BUILDING_BOX[1]

fluent COOKED[id:RangeArms]  = <[id].getPizzaFromOven, [id].ePutInBox>
fluent OUT[id:RangeArms]  =  <[id].putPizzaOutTray, [id].ePutInBox>
fluent BOX_BUILDED[id:RangeArms]  =  <[id].eBuildBox, [id].ePutInBox>
fluent PUT_INTO_BOX[id:RangeArms] = <[id].ePutInBox, Alphabet\{[id].ePutInBox}>
assert PUT_INTO_BOX = PUT_INTO_BOX[1]

ltl_property PIZZA_AND_BOX_READY =  forall[id:RangeArms][] ([id].sPutInBox -> (COOKED[id] && OUT[id] && BOX_BUILDED[id]))

ltl_property DONT_MAKE_EXTRA_BOXES =  forall[id:RangeArms][] ([id].sBuildBox -> !BOX_BUILDED[id])
ltl_property DONT_MAKE_EXTRA_PIZZAS =  forall[id:RangeArms][] ([id].getPizzaInTray -> !COOKED[id])

assert PUT_PIZZA_COOKED_OUT_INTO_BOX = (COOKED[1] && OUT[1] && BOX_BUILDED[1])

|| ENV = (forall[a:Arms] DOUBLE_ARM(a) || PIZZA_PROCESS).

// DEFINED CONTROLLER
controller ||C = (ENV)~{Goal}.

||CC = (C||C).

//DEFINED GOALS
controllerSpec Goal = {
	safety={PIZZA_AND_BOX_READY,DONT_MAKE_EXTRA_BOXES,DONT_MAKE_EXTRA_PIZZAS}
	liveness = {PUT_INTO_BOX}
	//concurrencyFluents={ACOOKING,ABUILDING}
	//lazyness= 1
	non_transient
	controllable = {ControllableActions}
}
