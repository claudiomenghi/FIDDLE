const MAX = 2
range R = 0..MAX


// -------- BEFORE ---------
set ControllableActions = {takeoff, land, ledon, ledoff, read}
set A = {ControllableActions, read.val[R]}
ARDRONE = ({takeoff, land, ledon, ledoff} -> ARDRONE | read -> read.val[R] -> ARDRONE).

assert LIGHTOFFWHENLANDED = [](ledon -> IN_AIR)
fluent IN_AIR = <takeoff,land> initially 0
assert NOREADWHENLANDED = [](read -> IN_AIR)
assert PROCESS_VALUE = ((!read W ledoff) && (!ledoff W ledon))
assert NOREAD_UNTIL_VALPROCESSED = [](read.val[1] -> PROCESS_VALUE && ((read.val[0] || read.val[2]) -> (!ledon W read)))
assert NOTWOPROCESSEDINAIR = [](read -> X(!read W !IN_AIR))

ltl_property S = (NOREADWHENLANDED && LIGHTOFFWHENLANDED && NOREAD_UNTIL_VALPROCESSED && NOTWOPROCESSEDINAIR)

fluent Read = <read, A\{read}>

controllerSpec ObjectiveBefore = {
	safety = {S}
//	assumption = {}
	liveness = {Read}
	controllable = {ControllableActions}
}

||EC = (C || ARDRONE).
||E = (ARDRONE).
||TEST = (C).

controller ||C=(ARDRONE)~{ObjectiveBefore}.

