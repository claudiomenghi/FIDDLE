/**
Esta version incluye las propiedades de safety como parte del goal. 
La propiedad OneWay esta escrita usando el keyword "ltl_property".
 */

/* Revised Single Lane bridge
*/

const N = 1// number of each type of car
range T = 0..N // type of car count
range ID= 1..N // car identities

const True = 1
const False = 0
range B = False..True

set Controllable = {red[ID].enter, blue[ID].enter}
set Uncontrollable = {red[ID].request, blue[ID].request, red[ID].idle, blue[ID].idle}
set Alphabet = {Controllable, Uncontrollable}

BRIDGE = BRIDGE[0][0],
BRIDGE[nr:T][nb:T] =
		(red[ID].request -> BRIDGE[nr][nb]
		|red[ID].enter  -> BRIDGE[nr+1][nb]
        |red[ID].exit     -> BRIDGE[nr-1][nb]
        |blue[ID].request -> BRIDGE[nr][nb]
        |blue[ID].enter -> BRIDGE[nr][nb+1]
        |blue[ID].exit    -> BRIDGE[nr][nb-1]
		).

CAR = (/* idle->CAR | */request->enter->exit->CAR).

/* cars may not overtake each other */
NOPASS1   = C[1],
C[i:ID]   = ([i].enter -> C[i%N+1]).

NOPASS2   = C[1],
C[i:ID]   = ([i].exit -> C[i%N+1]).

||CONVOY = ([ID]:CAR).// || NOPASS1 || NOPASS2).

||SingleLaneBridge = (red:CONVOY||blue:CONVOY|| BRIDGE).

//Involved fluents
fluent RedPassFluent[i:ID] = <red[i].enter, red[i].exit>
fluent BluePassFluent[i:ID] = <blue[i].enter, blue[i].exit>
fluent RedRequestFluent[i:ID] = <red[i].request, red[i].enter>//Alphabet\{red[i].request}>//red[i].enter>
fluent BlueRequestFluent[i:ID] = <blue[i].request, blue[i].enter>//Alphabet\{blue[i].request}> //blue[i].enter>

//Goal assertions
assert BluePass = exists[i:ID] BluePassFluent[i]
assert RedPass = exists[i:ID] RedPassFluent[i]
assert BlueRequest = exists[i:ID] BlueRequestFluent[i]
assert RedRequest = exists[i:ID] RedRequestFluent[i]
assert BluePassOrNoRequest = (BluePass || !BlueRequest)
assert RedPassOrNoRequest = (RedPass || !RedRequest)

assert RedReq1 =  (RedRequestFluent[1] || RedPassFluent[1])
assert RedReq2 =  (RedRequestFluent[2] || RedPassFluent[2])
assert BlueReq1 = (BlueRequestFluent[1] || BluePassFluent[1])
assert BlueReq2 = (BlueRequestFluent[2] || BluePassFluent[2])

//Safety Goal
ltl_property OneWay = []( !(RedPassFluent[ID] && BluePassFluent[ID]))

controller ||CSLB = SingleLaneBridge~{G1}.
controllerSpec G1 = {
safety = {OneWay}
assumption = {RedReq1, BlueReq1} //RedReq2, BlueReq1, BlueReq2}
liveness = {RedPassOrNoRequest, BluePassOrNoRequest}//RedPass, BluePass} //RedPassOrNoRequest, BluePassOrNoRequest}
controllable = {Controllable}
}

/*
controller ||CSLB_LAZY = SingleLaneBridge~{G2}.
controllerSpec G2 = {
	safety = {}//OneWay}
	assumption = {}
	liveness = {RedReq1, RedReq2, BlueReq1, BlueReq2}
	controllable = {Uncontrollable}
}
*/