const N = 2
range ProductCount = 1..N
set ProductTypes = {a, b}
set Toolset = {drill,oven,press}
set ProductsTypeA = {{a}.[ProductCount]}
set ProductsTypeB = {{b}.[ProductCount]}
set ProductTypesSet = {ProductsTypeA, ProductsTypeB}
set BlankAlpha = {[ProductTypesSet].{inTray, getInTray, putOutTray}, {put}.Toolset.[ProductTypesSet]}
set ArmAlpha = { [ProductTypesSet].{getInTray, putOutTray}, {put, get}.Toolset.[ProductTypesSet] }
set ToolsAlpha  = { {put, processOk, processFail,get}.Toolset.[ProductTypesSet] }
set Alphabet = {ArmAlpha, ToolsAlpha, BlankAlpha}
set ControllableActions = {[ProductTypesSet].{getInTray,putOutTray}, {put,get}.Toolset.[ProductTypesSet]}

set Failures = {{processFail}.Toolset.[ProductTypesSet]}


/*
INIT_PRODUCT(C=1) = ([C].inTray -> [C].getInTray ->END).
USE_TOOL(T='any, C=1) = (put[T][C] -> TRY_PROCESS),
TRY_PROCESS = (processOk[T][C] -> get[T][C] -> END | processFail[T][C]->get[T][C]->USE_TOOL).
FINISH_PRODUCT(C=1) = ([C].putOutTray -> END).
*/


INIT_PRODUCT(C=1) = ([C].inTray -> [C].getInTray -> END).
USE_TOOL(T='any, C=1) = (put[T][C] -> END).
FINISH_PRODUCT(C=1) = ([C].putOutTray -> END).


PRODUCT_A(C=1)= INIT_PRODUCT(C);
				USE_TOOL('oven,C);
				USE_TOOL('drill,C);
				USE_TOOL('press,C);
				FINISH_PRODUCT(C);
				PRODUCT_A.

PRODUCT_B(C=N/2+1)= INIT_PRODUCT(C);
					USE_TOOL('drill,C);
					USE_TOOL('press,C);
					USE_TOOL('oven,C);
					FINISH_PRODUCT(C);
					PRODUCT_B.

compose ||PRODUCT_PROCESS = (forall[a:ProductsTypeA] PRODUCT_A(a) || forall[b:ProductsTypeB] PRODUCT_B(b)).

RAW_PRODUCT(C=1) = ([C].inTray -> [C].getInTray -> TOOLS_AVAIL | [C].idle -> RAW_PRODUCT), 
TOOLS_AVAIL = (put[t:Toolset][C]->get[t][C]->TOOLS_AVAIL | [C].putOutTray -> RAW_PRODUCT).

||RAW_PRODUCTS = forall[p:ProductTypesSet] RAW_PRODUCT(p).


//The tool may fail processing a product. Once it failed, the product has to be taken out the tool
//and further on can be placed again to try to process it again. 
TOOL(T='any) = (put[T][e:ProductTypesSet] -> PRE_PROCESS[e]), 
PRE_PROCESS[e:ProductTypesSet] = (process[T][e] -> (processOk[T][e]->get[T][e]->TOOL | processFail[T][e]->PRE_PROCESS[e])). 
||TOOLS = (forall[t:Toolset] TOOL(t)).

/*
TOOL(T='any) = (put[T][e:ProductTypesSet] -> TRY_PROCESS[e]),
TRY_PROCESS[e:ProductTypesSet] = (processOk[T][e] -> get[T][e] -> TOOL | processFail[T][e]->get[T][e]->TOOL). 
||TOOLS = (forall[t:Toolset] TOOL(t)).
*/

ARM = IDLE,
IDLE = ([e:ProductTypesSet].getInTray -> PICKED_UP[e] | get[t:Toolset][e:ProductTypesSet] -> PICKED_UP[e]),
PICKED_UP[e:ProductTypesSet] = (put[t:Toolset][e] -> IDLE | [e].putOutTray -> IDLE).

||Plant = ( RAW_PRODUCTS || TOOLS || ARM).

ltl_property CANT_PROCESS_SIMULTANEOSLY = [](! exists[a:ProductTypesSet][b:ProductTypesSet] (TOOL_PROCESS[a]['drill] && TOOL_PROCESS[b]['oven]))

//ltl_property AddedToOutOnlyIfOk = [] (forall[a:ProductTypesSet] (ADDED_TO_OUTTRAY[a] -> PROCESSED_SUCCESSFULLY(a) ) )
///||A = AddedToOutOnlyIfOk.

fluent ADDED_TO_OUTTRAY[e:ProductTypesSet] = <[e].putOutTray, Alphabet\{[e].putOutTray}>
//The ending action needs to be getInTray, so the controller can't postpone an element indefinitely
fluent ADDED_TO_INTRAY[e:ProductTypesSet] = <[e].inTray, [e].getInTray>
fluent TOOL_PROCESS[e:ProductTypesSet][t:Toolset] = <put[t][e], get[t][e]>
fluent BEING_PROCESSED[e:ProductTypesSet] = <[e].getInTray, [e].putOutTray>
//fluent F_PROCESSED_SUCCESSFULLY[e:ProductTypesSet][t:Toolset] = <processOk[t][e], [e].inTray>//put[t][e]>
fluent F_Failures = <Failures, Alphabet\{Failures}> 

assert ASSUME_ON_A1 = (ADDED_TO_INTRAY['a[1]] || BEING_PROCESSED['a[1]])
assert ASSUME_ON_B1 = (ADDED_TO_INTRAY['b[1]] || BEING_PROCESSED['b[1]])
assert ASSUME_ON_A2 = (ADDED_TO_INTRAY['a[2]] || BEING_PROCESSED['a[2]])
assert ASSUME_ON_B2 = (ADDED_TO_INTRAY['b[2]] || BEING_PROCESSED['b[2]])

//assert PROCESSED_SUCCESSFULLY(E='e) = forall[t:Toolset] F_PROCESSED_SUCCESSFULLY[E][t] 

assert GOAL_FOR_A = exists[e:ProductsTypeA] (ADDED_TO_OUTTRAY[e]) //PROCESSED_SUCCESSFULLY(e) && 
assert GOAL_FOR_B = exists[e:ProductsTypeB] (ADDED_TO_OUTTRAY[e]) //PROCESSED_SUCCESSFULLY(e) && 

assert Failures = F_Failures

controller ||C = (Plant)~{Objective}.
checkCompatibility ||Comp = (Plant)~{Objective}.

goal Objective = {
	safety = {CANT_PROCESS_SIMULTANEOSLY, PRODUCT_PROCESS}
	fault = {Failures}
	assume = {ASSUME_ON_A1, ASSUME_ON_B1, ASSUME_ON_A2, ASSUME_ON_B2}
	guarantee = {GOAL_FOR_A, GOAL_FOR_B}
	controllable = {ControllableActions}
}

||AnalisedPlant = (Plant||CANT_PROCESS_SIMULTANEOSLY||PRODUCT_PROCESS).
