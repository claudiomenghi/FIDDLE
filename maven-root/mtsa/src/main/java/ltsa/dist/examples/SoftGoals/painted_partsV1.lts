const CantArms = 2
range RangeArms = 1..CantArms
set Arms = {[RangeArms]}

const CantParts = 2
range RangeParts = 1..CantParts
set Parts = {[RangeArms]}

set ArmPartsActions = {getPart,putPart,sPaint}
set ArmControl = {ArmPartsActions.[Parts], getAssembled, putAssembled}
set ControllableActions = {[Arms].ArmControl, done, assemble/*,pum*/}

ARM(C=1) = IDLE, 
IDLE = ( [C].getPart.[p:RangeParts]-> PART[p] | [C].getAssembled -> ASSEMBLED), 
PART[p:RangeParts] = ([C].sPaint.[p] -> [C].ePaint.[p] -> PART[p] | [C].putPart.[p] -> IDLE),
ASSEMBLED = ([C].putAssembled ->IDLE | [C].sPaint.[p:RangeParts] -> [C].ePaint.[p] -> ASSEMBLED).

ASSEMBLER = NOT_ASSEMBLED, 
NOT_ASSEMBLED = ( [id:RangeArms].getPart.[p:RangeParts] -> NOT_ASSEMBLED | assemble/* -> pum -> pum -> pum*/-> ASSEMBLED),
ASSEMBLED = ([id:RangeArms].getAssembled -> ASSEMBLED | done-> NOT_ASSEMBLED).

ASSEMBLED_PART =  IDLE, 
IDLE = ([id:RangeArms].getAssembled -> IN_USE),
IN_USE = ([id:RangeArms].putAssembled-> IDLE).

PART(C=1) = IDLE,
IDLE = ([id:RangeArms].getPart.[C] -> IN_USE),
IN_USE = ([id:RangeArms].putPart.[C] -> IDLE).

fluent IN_USE[id:RangeParts] = <[id1:RangeArms].{getAssembled,getPart.[id]}, [id2:RangeArms].{putAssembled,putPart.[id]}>

fluent IN_USE_ARM[id:RangeArms] = <[id].{getAssembled,getPart.[id1:RangeParts]}, [id].{putAssembled,putPart.[id2:RangeParts]}>

fluent PAINTED[id:RangeParts] = <[id1:RangeArms].ePaint.[id], done>
fluent ASSEMBLED = <assemble, done>

assert GOAL = (ASSEMBLED && forall[p:Parts]PAINTED[p])

assert KEEP_BUSY = forall[p:Parts]IN_USE_ARM[p]

ltl_property AssembleNotInUse = [] (assemble -> !(exists[p:Parts] IN_USE[p]))
ltl_property GoalReachedThenDone = [] (GOAL -> X done)

|| ENV = (forall[a:Arms] ARM(a) || ASSEMBLER || forall[p:Parts] PART(p) ||  ASSEMBLED_PART).

// DEFINED CONTROLLER
controller ||C = (ENV)~{Goal}.

||CC = (C||C).

//DEFINED GOALS
controllerSpec Goal = {
	safety={AssembleNotInUse,GoalReachedThenDone}
	liveness = {GOAL}
	//concurrencyFluents={KEEP_BUSY}
	controllable = {ControllableActions}
}		

 
