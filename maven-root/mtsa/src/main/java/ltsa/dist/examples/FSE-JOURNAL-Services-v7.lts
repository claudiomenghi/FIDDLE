const ClientsCount = 2
range Clients = 1..ClientsCount

set AvailableServices = {car, flight}//, hotel}
set Agency = {agency.req, agency.resp}
set Network = {yesNetwork, noNetwork}
set ControllableC1 = {AvailableServices.{buy, query, reserve, bind}}
set Controllable = {{ControllableC1}, agency.resp}
set FailureSet = {AvailableServices.{queryFail, reserveFail, buyFail}}
set Uncontrollable = {FailureSet, AvailableServices.{querySuccess, reserveSuccess, buySuccess}}
set A = {Controllable, Uncontrollable, Agency, Network}


//Environment model
SERVICE(SRV='car, MUT_RESERVE=0, MUT_QINCREMENTAL=0) = ([SRV].bind -> IDLE),
IDLE = ([SRV].query -> ( [SRV].queryFail -> IDLE | [SRV].querySuccess -> if (MUT_QINCREMENTAL) then REQUERY else RESULTSET)),
REQUERY = ([SRV].query -> ( [SRV].queryFail -> IDLE | [SRV].querySuccess -> RESULTSET)),
RESULTSET = if (MUT_RESERVE) then RESERVED else
	([SRV].reserve -> ([SRV].reserveFail -> IDLE | [SRV].reserveSuccess -> RESERVED)),
RESERVED = ([SRV].buy -> ([SRV].buyFail -> RESERVED | [SRV].buySuccess -> IDLE) ).

||SERVICES1 = (forall[srv:AvailableServices] {a}:SERVICE(srv,0,0) ||
   		   forall[srv:AvailableServices] {b}:SERVICE(srv,0,1)).

||SERVICES = (SERVICES1) 
					/{car/{a,b}.car, flight/{a,b}.flight}.


AGENCY = (agency.idle-> AGENCY | agency.req->agency.resp->AGENCY).

||ENV = (SERVICES || AGENCY || NETWORK).


NETWORK = YES, 
YES = ({Controllable,Uncontrollable} -> YES | noNetwork -> NO),
NO = (yesNetwork -> NOBIS), 
NOBIS = ({Controllable,Uncontrollable} -> YES).


//fluent definitions
fluent F_UsrReq = <agency.req, A\{agency.req}>
fluent F_AgencyResp = <agency.resp, A\{agency.resp}>
fluent F_Failures = <FailureSet, A\{FailureSet}>
fluent F_Reserved[srv:AvailableServices] = <[srv].reserveSuccess, {[srv].buySuccess}> //, [srv].buyFail
fluent F_BuySuccessfully[srv:AvailableServices] = <[srv].buySuccess, A\{[srv].buySuccess}>
fluent F_Query[srv:AvailableServices] = <[srv].query, A\{[srv].query}>
fluent F_BoughtSuccessfully[srv:AvailableServices] = <[srv].buySuccess, agency.req>
fluent F_TryToBuy[srv:AvailableServices] = <[srv].buy, A\{[srv].buy}>
fluent F_PendingReq = <agency.req, agency.resp>
fluent F_Reserve[srv:AvailableServices] = <[srv].reserve, A\{[srv].reserve}>
fluent F_SuccessfullyFound[srv:AvailableServices] = <[srv].querySuccess, agency.req>

fluent F_NETWORK = <yesNetwork, noNetwork>
assert A_NETWORK = F_NETWORK

//assertions
assert Failures = F_Failures
assert UsrResp = F_AgencyResp
assert AssumptionOnRequests = F_PendingReq
assert AllBought = forall[srv:AvailableServices](F_BoughtSuccessfully[srv])
assert SomeQuery =  exists[srv:AvailableServices] F_Query[srv]

//Safety definition
constraint ReserveBeforeBuy = [] (forall[srv:AvailableServices][srv2:AvailableServices] 
									(F_TryToBuy[srv] -> (F_BoughtSuccessfully[srv2] || F_Reserved[srv2])))

ltl_property OneBind = [](forall[srv:AvailableServices] ([srv].bind -> X ([] ![srv].bind)))



ltl_property  NoReserveOrQueryAfterPay = 
		[](forall[srv1:AvailableServices]
			 ([srv1].buy -> (forall[srv2:AvailableServices]
								(![srv2].queryFail && ![srv2].reserveFail) W AllBought)))


||Test = (ReserveBeforeBuy ||ServiceQueryImpliesUsrReq || 
           UsrRspImpliesAllBought || QueryImpliesNotBought|| ENV).

ltl_property ServiceQueryImpliesUsrReq = [](SomeQuery -> F_PendingReq)
ltl_property UsrRspImpliesAllBought = [](F_AgencyResp -> AllBought)
ltl_property QueryImpliesNotBought = [](forall[srv:AvailableServices] 
										(F_Query[srv] -> !F_BoughtSuccessfully[srv]))

//Controller specifications
controller ||C = ENV~{G1}.
checkCompatibility ||Compatible = ENV~{G1}.

//Defined goals
controllerSpec G1 = {
       safety = {OneBind, UsrRspImpliesAllBought, NoReserveOrQueryAfterPay
				, QueryImpliesNotBought, ServiceQueryImpliesUsrReq
				}//, ReserveImpliesAllFound} 
       failure = {Failures}
       assumption = {AssumptionOnRequests, A_NETWORK}
       liveness = {UsrResp}
       controllable = {Controllable}
}
