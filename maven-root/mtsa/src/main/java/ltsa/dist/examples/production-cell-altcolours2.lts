//ACTION SETS
set Colours = {yellow, red}
set Tools = {drill}
set GetLocations = {drill, paint, in}
set PutLocations = {drill, paint, out, trash}
set PutGetLocations = {drill, paint}
set Locations = {PutLocations, GetLocations}
set Puts = {putdownat.PutLocations.Colours}
set Gets = {pickupfrom.GetLocations.Colours}
set PutsSF = {putdownat_success.PutLocations.Colours}
set GetsSF = {pickupfrom_success.GetLocations.Colours, pickupfrom_fail.GetLocations.Colours}
set A = {Puts, Gets, PutsSF, GetsSF}
set CA = {Puts,Gets}

//Domain Model
PAINT = (putdownat_success['paint][Colours]->COLORING), 
COLORING = (ready['paint]['red]->pickupfrom_success['paint]['red]->PAINT)+{ready['paint]['yellow],pickupfrom_success['paint]['yellow]}.
TOOL(T='any) = (putdownat_success[T][c:Colours]->ready[T][c]->pickupfrom_success[T][c]->TOOL). 
||TOOLS = (forall[t:Tools] TOOL(t)).

ARM = (pickupfrom[l:GetLocations][c:Colours]->GET_RESULT[l][c]), 
GET_RESULT[l:GetLocations][c:Colours] = (pickupfrom_success[l][c]->PICKED_UP[c] 
				| pickupfrom_fail[l][c]->ARM),
PICKED_UP[c:Colours] = (putdownat[l:PutLocations][c] -> putdownat_success[l][c]-> ARM).

SUPPLY = (supply[c:Colours]->pickupfrom_success['in][c]->SUPPLY).
||SUPPLIER = SUPPLY.//(forall[c:Colours] SUPPLY(c)).

const MAX_COUNT = 9
range Count = 0..MAX_COUNT
MAX_SUPPLY_IGNORE = COUNT[0],
COUNT[id:Count] = (A\{pickupfrom['in][c:Colours]} -> COUNT[id+1] | pickupfrom['in][c:Colours] -> COUNT[0]),
COUNT[MAX_COUNT+1] = (pickupfrom['in][c:Colours] -> COUNT[0]).
OUT_PROTOCOL = (putdownat_success['out]['red] -> putdownat_success['out]['yellow] -> OUT_PROTOCOL).

||DM = ( SUPPLIER || PAINT || TOOLS || ARM || OUT_PROTOCOL || MAX_SUPPLY_IGNORE).

//DEFINED FLUENTS 
//The ending action needs to be getInTray, so the controller can't postpone an element indefinitely
fluent F_COLOUR_PUT[l:PutLocations][c:Colours] = <putdownat_success[l][c], A\{putdownat_success[l][c]}>

fluent F_FAILURES = <pickupfrom_fail.GetLocations.Colours, A\{pickupfrom_fail.GetLocations.Colours}>

assert FAILURES = F_FAILURES

fluent F_PAINT = <putdownat_success['paint][Colours], putdownat_success['out][Colours]>
fluent F_HAVE_DRILLED = <ready['drill][Colours], putdownat_success['out][Colours]>
fluent F_SUPPLY_YELLOW = <supply['yellow], A\{supply['yellow]}>
fluent NON_EMPTY_SUPPLY = <supply[Colours], pickupfrom_success['in][Colours]>
fluent PICKED_IN = <pickupfrom_success['in][Colours], A\{pickupfrom_success['in][Colours]}>

ltl_property TOOL_ORDER = [] (F_PAINT -> F_HAVE_DRILLED)
//ltl_property EMPTY_THEN_YELLOW = (EMPTY_SUPPLY -> X F_SUPPLY_YELLOW)

||TEST = TOOL_ORDER.

assert TRUE = (RED_OUT || !RED_OUT)
assert RED_OUT = F_COLOUR_PUT['out]['red]
assert YELLOW_IN = F_SUPPLY_YELLOW
assert ETY = (F_SUPPLY_YELLOW || !PICKED_IN)//(F_SUPPLY_YELLOW || NON_EMPTY_SUPPLY) //(EMPTY_SUPPLY -> X F_SUPPLY_YELLOW)
assert PI = PICKED_IN

//DEFINED CONTROLLERS
controller ||C = (DM)~{Objective}.

//DEFINED GOALS 
goal Objective = {
	safety = {TOOL_ORDER}
	fault = {FAILURES}
	assume = {YELLOW_IN}
	guarantee = {RED_OUT}
	controllable = {CA}

}

