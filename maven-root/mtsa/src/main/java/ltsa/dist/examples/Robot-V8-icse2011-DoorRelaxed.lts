set Moves = {n, s, q}
const NORTH = 'n
const SOUTH = 's
const STOPPED = 'q

set Positions = {pos1, pos2, pos3, pos4}
set Controlled = {mn, ms, me, mw, putPackage, getPackage}
set UND = {Positions, getPackageFailed, getPackageOk}
set Uncontrolled = {UND, openDoor, closeDoor}
set A = {Controlled, Uncontrolled}

fluent F_Pos1 = <pos1, Positions\{pos1}>
fluent F_Pos4 = <pos4, Positions\{pos4}>

fluent F_DoorOpen = <openDoor, closeDoor>
fluent F_TryToGetPackage = <getPackage, getPackageOk> //since there's no restriction for the robot to move from 4 without any package, to have assumptions compatible with the environment, the assumption has to be extended to putPackjageOk or ms
fluent F_GetPackageOk = <getPackageOk, A\{getPackageOk}>
fluent F_GetPackageFailed = <getPackageFailed, A\{getPackageFailed}>
//fluent F_PutPackage = <putPackage, A\{putPackage}>
assert DoorOpen = F_DoorOpen
assert TryToGetPackage = F_TryToGetPackage
assert GetPackageOk = F_GetPackageOk
assert GetPackageFailed = F_GetPackageFailed

assert ASSUME_ON_BALL = (!TryToGetPackage) // getPackageOk || !TryToGetPackage) // TryToGetPackage -> getPackageOk
assert ASSUME_ON_DOOR = DoorOpen
assert Pos4JustUnloaded = F_GetPackageOk

goal G1 = {
	safety = {ROBOT_RESTRICTION}
	fault = {GetPackageFailed}
	assume = {ASSUME_ON_DOOR}
	guarantee = {Pos4JustUnloaded}
	controllable = {Controlled}
}
controller ||C = (PLANT)~{G1}.
checkCompatibility ||COMPATIBILITY_CHECK = (PLANT)~{G1}.

DOOR = CLOSED_DOOR, 
OPEN_DOOR = ({UND, Controlled}->OPEN_DOOR | closeDoor->CLOSED_DOOR), 
CLOSED_DOOR = (openDoor->{UND, Controlled}->OPEN_DOOR | {UND, Controlled}->CLOSED_DOOR).
ARM = (putPackage->PUT), 
PUT = (getPackage->TRY), TRY = (getPackageOk->ARM | getPackageFailed->PUT).
ROBOT = (mn->ROBOT | ms->ROBOT | me->ROBOT | mw->ROBOT).
/*el problema es que hay que modelar de otro modo esto de no pasar o si pasar.
EL CAMBIO ES: el mover y la posicion tienen que ser atomicos, entonces si la puerta esta cerrada,
intenta moverse y sensa que esta en la posicion x, sino, queda "moviendose" y al cambiar el estado
*/

TOPOLOGY = (pos1->ENV_P[1][0][0][STOPPED]),
ENV_P[pos:1..4][doorOpen:0..1][packageOn:0..1][moving:Moves] = (
	  when(doorOpen==0)									openDoor->ENV_P[pos][1][packageOn][moving]
	| when(doorOpen==1)									closeDoor->ENV_P[pos][0][packageOn][moving]
	| when(moving==STOPPED)&&(pos!=4)					mn -> ENV_P[pos][doorOpen][packageOn][NORTH]
	| when(moving==STOPPED)&&(pos!=1)					ms -> ENV_P[pos][doorOpen][packageOn][SOUTH] 
	| when(moving==STOPPED)&&(pos==4)&&(packageOn==0)	ms -> ENV_P[pos][doorOpen][packageOn][SOUTH]
	| when(moving==STOPPED)&&(pos==1)&&(packageOn==0) 	putPackage->ENV_P[pos][doorOpen][1][moving]
	| when(moving==STOPPED)&&(pos==4)&&(packageOn==1)	getPackage->TRY_PUT_BALL[pos][doorOpen][packageOn][moving]
	| when(pos==1)&&(moving==NORTH)						pos2->ENV_P[2][doorOpen][packageOn][STOPPED]
	| when(pos==2)&&(moving==SOUTH)						pos1->ENV_P[1][doorOpen][packageOn][STOPPED]
	| when(pos==2)&&(moving==NORTH)&&(doorOpen==1)		pos3->ENV_P[3][doorOpen][packageOn][STOPPED]  
	| when(pos==2)&&(moving==NORTH)&&(doorOpen==0)		pos2->ENV_P[2][doorOpen][packageOn][STOPPED]
	| when(pos==3)&&(moving==NORTH)						pos4->ENV_P[4][doorOpen][packageOn][STOPPED]
	| when(pos==3)&&(moving==SOUTH)&&(doorOpen==1)		pos2->ENV_P[2][doorOpen][packageOn][STOPPED]
	| when(pos==3)&&(moving==SOUTH)&&(doorOpen==0)		pos3->ENV_P[3][doorOpen][packageOn][moving]
	| when(pos==4)&&(moving==SOUTH)						pos3->ENV_P[3][doorOpen][packageOn][moving]),
TRY_PUT_BALL[pos:1..4][doorOpen:0..1][packageOn:0..1][moving:Moves] = 
													(getPackageOk->ENV_P[pos][doorOpen][0][moving] 
													| getPackageFailed->ENV_P[pos][doorOpen][1][moving])+{me,mw}. 


||PLANT = (DOOR || ARM || ROBOT || TOPOLOGY).

||ANALYSED_PLANT = (PLANT || ROBOT_RESTRICTION).

||RB = ROBOT_RESTRICTION.

ROBOT_RESTRICTION = (pos1->ROBOT_D[1][0][0][STOPPED]),
ROBOT_D[pos:1..4][doorOpen:0..1][packageOn:0..1][moving:Moves] = (
	  when(doorOpen==0)									openDoor->ROBOT_D[pos][1][packageOn][moving]
	| when(doorOpen==1)									closeDoor->ROBOT_D[pos][0][packageOn][moving]
	| when(moving==STOPPED)&&(pos!=4)					mn -> ROBOT_D[pos][doorOpen][packageOn][NORTH]
	| when(moving==STOPPED)&&(pos!=1)&&(pos!=4)			ms -> ROBOT_D[pos][doorOpen][packageOn][SOUTH] //it should have the guard pos!=4 in order to force the assumptions to be compatible with the environment. 
	| when(moving==STOPPED)&&(pos==4)&&(packageOn==0)	ms -> ROBOT_D[pos][doorOpen][packageOn][SOUTH]
	| when(moving==STOPPED)&&(pos==1)&&(packageOn==0) 	putPackage->ROBOT_D[pos][doorOpen][1][moving]
	| when(moving==STOPPED)&&(pos==4)&&(packageOn==1)	getPackage->TRY_PUT_BALL[pos][doorOpen][packageOn][moving]
	| when(pos==1)&&(moving==NORTH) 					pos2->ROBOT_D[2][doorOpen][packageOn][STOPPED]
	| when(pos==2)&&(moving==NORTH)&&(doorOpen==1)		pos3->ROBOT_D[3][doorOpen][packageOn][STOPPED]
	| when(pos==2)&&(moving==NORTH)&&(doorOpen==0)		pos2->ROBOT_D[2][doorOpen][packageOn][STOPPED]
	| when(pos==2)&&(moving==SOUTH)						pos1->ROBOT_D[1][doorOpen][packageOn][STOPPED] 
	| when(pos==3)&&(moving==NORTH)						pos4->ROBOT_D[4][doorOpen][packageOn][STOPPED]
	| when(pos==3)&&(moving==SOUTH)&&(doorOpen==1)		pos2->ROBOT_D[2][doorOpen][packageOn][STOPPED]
	| when(pos==3)&&(moving==SOUTH)&&(doorOpen==0)		pos3->ROBOT_D[3][doorOpen][packageOn][moving]
	| when(pos==4)&&(moving==SOUTH)						pos3->ROBOT_D[3][doorOpen][packageOn][moving]),
TRY_PUT_BALL[pos:1..4][doorOpen:0..1][packageOn:0..1][moving:Moves] = 
													(getPackageOk->ROBOT_D[pos][doorOpen][0][moving] 
													| getPackageFailed->ROBOT_D[pos][doorOpen][1][moving])+{me,mw}. 
