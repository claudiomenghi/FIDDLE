set Moves = {n, s, q}
const NORTH = 'n
const SOUTH = 's
const STOPPED = 'q

set Positions = {pos1, pos2, pos3, pos4}
set Controlled = {mn, ms, me, mw, getBall, putBall}
set Uncontrolled = {Positions, getBallFailed, getBallOk, openDoor, closeDoor}
set A = {Controlled, Uncontrolled}

fluent F_Pos1 = <pos1, Positions\{pos1}>
fluent F_Pos4 = <pos4, Positions\{pos4}>

fluent F_GetBallOk = <getBallOk, A\{getBallOk}>
fluent F_DoorOpen = <openDoor, closeDoor>
fluent F_TryToGetBall = <getBall, getBallOk> //{getBallOk, mn}>
fluent F_PutBall = <putBall, A\{putBall}>

assert GetBallOk = F_GetBallOk
assert DoorOpen = F_DoorOpen
assert TryToGetBall = F_TryToGetBall

assert ASSUME_ON_BALL = (GetBallOk || !TryToGetBall) // TryToGetBall -> GetBallOk
assert ASSUME_ON_DOOR = DoorOpen
assert Pos1AndBallLoaded = (F_Pos1 && F_GetBallOk)
assert Pos4AndBallUnloaded = (F_Pos4 && F_PutBall)
assert Pos1 = (F_Pos1)
assert BallUnloaded = (F_PutBall)

assert G = (F_Pos4 && F_PutBall)

goal G1 = {
	safety = {ROBOT_RESTRICTION}
	assume = {ASSUME_ON_BALL, ASSUME_ON_DOOR}
	guarantee = {G}//Pos1, BallUnloaded} //Pos1AndBallLoaded, Pos4AndBallUnloaded}
	controllable = {Controlled}
}
//el robot no se puede mover de la posicion 1 si no tiene la pelota. 
//si hay infinitas pelotas y la puerta se habre infinitas veces ENTONCES el robot va a estar en posicion 4 descargando infinitamente. 

controller ||C = (PLANT)~{G1}.

assert FALSE = (DoorOpen && !DoorOpen)

goal CompatibilityCondition = {
	safety = {}
	assume = {ASSUME_ON_BALL, ASSUME_ON_DOOR}
	guarantee = {FALSE}
	controllable = {Controlled}
}
controller ||COMPATIBILITY_CHECK = PLANT~{CompatibilityCondition}.


DOOR = (openDoor->closeDoor->DOOR).
ARM = (getBall->TRY), TRY = (getBallOk->putBall->ARM | getBallFailed->ARM).
ROBOT = (mn->ROBOT | ms->ROBOT | me->ROBOT | mw->ROBOT).
TOPOLOGY = (pos1->ENV_P[1][0][0][STOPPED]),
ENV_P[pos:1..4][doorOpen:0..1][ballOn:0..1][moving:Moves] = (
	  when(doorOpen==0)								openDoor->ENV_P[pos][1][ballOn][moving]
	| when(moving==STOPPED)&&(pos==1)&&(ballOn==1)	mn -> ENV_P[pos][doorOpen][ballOn][NORTH]
	| when(moving==STOPPED)&&(pos==1)&&(ballOn==0) 	getBall->TRY_GET_BALL[pos][doorOpen][ballOn][moving]
	| when(moving==STOPPED)&&(pos!=4)&&(pos!=1)		mn -> ENV_P[pos][doorOpen][ballOn][NORTH] 
	| when(moving==STOPPED)&&(pos!=1)				ms->ENV_P[pos][doorOpen][ballOn][SOUTH]
	| when(pos==1)&&(moving==NORTH)					pos2->ENV_P[2][doorOpen][ballOn][STOPPED]
	| when(pos==2)&&(moving==SOUTH)					pos1->ENV_P[1][doorOpen][ballOn][STOPPED]
	| when(pos==2)&&(doorOpen==1)&&(moving==NORTH)	pos3->closeDoor->ENV_P[3][0][ballOn][STOPPED]
	| when(pos==2)&&(doorOpen==0)&&(moving==NORTH)	pos2->ENV_P[pos][doorOpen][ballOn][STOPPED]
	| when(pos==3)&&(moving==NORTH)					pos4->ENV_P[4][doorOpen][ballOn][STOPPED]
	| when(pos==3)&&(doorOpen==1)&&(moving==SOUTH)	pos2->closeDoor->ENV_P[2][0][ballOn][STOPPED]
	| when(pos==3)&&(doorOpen==0)&&(moving==SOUTH)	pos3->ENV_P[pos][doorOpen][ballOn][STOPPED]
	| when(pos==4)&&(moving==SOUTH)&&(ballOn==0)	pos3->ENV_P[3][doorOpen][ballOn][STOPPED] 
	| when(pos==4)&&(ballOn==1)&&(moving==STOPPED)	putBall->ENV_P[pos][doorOpen][0][moving]),
TRY_GET_BALL[pos:1..4][doorOpen:0..1][ballOn:0..1][moving:Moves] = 
													(getBallOk->ENV_P[pos][doorOpen][1][moving] 
													| getBallFailed->ENV_P[pos][doorOpen][0][moving])+{me,mw}. 


||PLANT = (DOOR || ARM || ROBOT || TOPOLOGY).

||ANALYSED_PLANT = (PLANT || ROBOT_RESTRICTION).

ROBOT_RESTRICTION = (pos1->ROBOT_D[1][0][0][STOPPED]),
ROBOT_D[pos:1..4][doorOpen:0..1][ballOn:0..1][moving:Moves] = (
	  when(doorOpen==0)								openDoor -> ROBOT_D[pos][1][ballOn][moving]
	| when(moving==STOPPED)&&(pos==1)&&(ballOn==1)	mn -> ROBOT_D[pos][doorOpen][ballOn][NORTH]
	| when(moving==STOPPED)&&(pos==1)&&(ballOn==0) 	getBall->TRY_GET_BALL[pos][doorOpen][ballOn][moving]
	| when(moving==STOPPED)&&(pos!=4)&&(pos!=1)		mn -> ROBOT_D[pos][doorOpen][ballOn][NORTH]
	| when(moving==STOPPED)&&(pos==4)&&(ballOn==0)	ms -> ROBOT_D[pos][doorOpen][ballOn][SOUTH]
	| when(moving==STOPPED)&&(pos!=1)&&(pos!=4)		ms -> ROBOT_D[pos][doorOpen][ballOn][SOUTH]
	| when(pos==1)&&(moving==NORTH) 				pos2->ROBOT_D[2][doorOpen][ballOn][STOPPED]
	| when(pos==2)&&(doorOpen==1)&&(moving==NORTH)	pos3->closeDoor->ROBOT_D[3][0][ballOn][STOPPED]
	| when(pos==2)&&(doorOpen==0)&&(moving==NORTH)	pos2->ROBOT_D[2][doorOpen][ballOn][STOPPED]
	| when(pos==2)&&(moving==SOUTH)					pos1->ROBOT_D[1][doorOpen][ballOn][STOPPED] 
	| when(pos==3)&&(moving==NORTH)					pos4->ROBOT_D[4][doorOpen][ballOn][STOPPED]
	| when(pos==3)&&(doorOpen==1)&&(moving==SOUTH)	pos2->closeDoor->ROBOT_D[2][0][ballOn][STOPPED]
	| when(pos==3)&&(doorOpen==0)&&(moving==SOUTH)	pos3->ROBOT_D[3][doorOpen][ballOn][STOPPED]
	| when(pos==4)&&(ballOn==1)&&(moving==STOPPED)	putBall->ROBOT_D[pos][doorOpen][0][moving]
	| when(pos==4)&&(moving==SOUTH)&&(ballOn==0)	pos3->ROBOT_D[3][doorOpen][ballOn][STOPPED]), 
TRY_GET_BALL[pos:1..4][doorOpen:0..1][ballOn:0..1][moving:Moves] = 
													(getBallOk->ROBOT_D[pos][doorOpen][1][moving] 
													| getBallFailed->ROBOT_D[pos][doorOpen][0][moving])+{me,mw}. 

/*
controller ||CC = Controlled_Plant~{Def46}.

||Controlled_Plant = (Cont || PLANT).


ROBOT_RESTRICTION = (pos1->ROBOT_D[1][0][0]['n]),
ROBOT_D[pos:1..4][doorOpen:0..1][ballOn:0..1][moving:Moves] = (
	openDoor -> ROBOT_D[pos][1][ballOn][moving]
	| when(pos==1)&&(moving==STOPED)&&(ballOn==0) 	getBall->TRY_GET_BALL[pos][doorOpen][ballOn][moving]
	| when(pos==1) 					mn->pos2->ROBOT_D[2][doorOpen][ballOn][moving]
	| when(pos==2)					ms->pos1->ROBOT_D[1][doorOpen][ballOn][moving]
	| when(pos==2)					mn->POS_2_MN[pos][doorOpen][ballOn][moving] 
	| when(pos==3)					mn->pos4->ROBOT_D[4][doorOpen][ballOn][moving]
	| when(pos==3)					ms->POS_3_MS[pos][doorOpen][ballOn][moving]
	| when(pos==4)&&(ballOn==1) 	putBall->ROBOT_D[pos][doorOpen][0][moving]
	| when(pos==4)					ms->pos3->ROBOT_D[3][doorOpen][ballOn][moving]), 
POS_3_MS[pos:1..4][doorOpen:0..1][ballOn:0..1][moving:Moves] = (
	when(pos==3)&&(doorOpen==1)		pos2->closeDoor->ROBOT_D[2][0][ballOn][moving]
	| when(pos==3)&&(doorOpen==0)	pos3->ROBOT_D[pos][doorOpen][ballOn][moving]),
POS_2_MN[pos:1..4][doorOpen:0..1][ballOn:0..1][moving:Moves] = (
	when(pos==2)&&(doorOpen==1)		pos3->closeDoor->ROBOT_D[3][0][ballOn][moving]
	| when(pos==2)&&(doorOpen==0)	pos2->ROBOT_D[pos][doorOpen][ballOn][moving]),
TRY_GET_BALL[pos:1..4][doorOpen:0..1][ballOn:0..1][moving:Moves] = 
	(getBallOk->ROBOT_D[pos][doorOpen][1][moving] 
	| getBallFailed->ROBOT_D[pos][doorOpen][0][moving])+{me,mw}. 
*/
