const MAX = 2
range R = 0..MAX


// -------- BEFORE ---------
set ControllableActions = {takeoff, land, ledon, ledoff, read, switchE}
set OLDControllableActions = {takeoffOLD, landOLD, ledonOLD, ledoffOLD, readOLD}
set A = {ControllableActions, read.val[R], OLDControllableActions}

assert LIGHTOFFWHENLANDED = [](Ledon -> IN_AIR)
fluent IN_AIR = <{takeoff,takeoffOLD},{land,landOLD}> initially 0
assert NOREADWHENLANDED = [](Read -> IN_AIR)
assert PROCESS_VALUE = ((!Read W Ledoff) && (!Ledoff W Ledon))
assert NOREAD_UNTIL_VALPROCESSED = [](read.val[1] -> PROCESS_VALUE)
assert NOTWOPROCESSEDINAIR = [](Read -> X(!Read W !IN_AIR))

fluent SwitchE = <switchE, switchC> initially 0 // HACK! switchC is guaranteed to not happen
fluent SwitchC = <switchC, landOLD> initially 0 // HACK! landOLD is guaranteed to not happen
assert A_SwitchC = SwitchC

assert NOREAD_UNTIL_VALPROCESSED_NEW = []((read.val[2] -> PROCESS_VALUE))
//&& ((read.val[0] || read.val[1]) -> (!Ledon W Read)))
assert TRUE = (switchE || !switchE)



ltl_property S = ((NOREADWHENLANDED && LIGHTOFFWHENLANDED && NOREAD_UNTIL_VALPROCESSED && NOTWOPROCESSEDINAIR) W switchE)
ltl_property NEWS = [](switchE -> (NOREADWHENLANDED && LIGHTOFFWHENLANDED && NOREAD_UNTIL_VALPROCESSED_NEW && NOTWOPROCESSEDINAIR))
ltl_property I1 = (TRUE)
ltl_property I2 = []((read.val[1] && (!Ledon W switchE)) -> PROCESS_VALUE) // When switchE on unprocessed value, use OLD spec
ltl_property I3 = []((read.val[1] && (!Ledon W switchE)) -> ((!Ledon W Read))) // When switchE on unprocessed value, use OLD spec


fluent Read = <{read, readOLD}, A\{read, readOLD}>
fluent Takeoff = <{takeoff, takeoffOLD}, A\{takeoff, takeoffOLD}>
fluent Land = <{land, landOLD}, A\{land, landOLD}>
fluent Ledon = <{ledon, ledonOLD}, A\{ledon, ledonOLD}>
fluent Ledoff = <{ledoff, ledoffOLD}, A\{ledoff, ledoffOLD}>


// E en fase 2 siga en el estado que estaba E en fase 1.
// Esto se puede hacer cambiando C para que se apague al recibir switchC. 
// Entonces la composicion de C y E va a comportarse como E (fase 2) despues de switchC.

// El mismo problema existe en general para fase 3 aunque justo aca no se necesita.


	C_Original = 
	Q0	= (takeoffOLD -> Q1 | switchC -> OFF),
	Q1	= (readOLD -> Q4 | switchC -> OFF),
	Q2	= (landOLD -> Q0 | switchC -> OFF),
	Q3	= (blinkOLD -> Q2 | switchC -> OFF),
	Q4	= (read.val.{[0], [2]} -> Q2
		  |read.val[1] -> Q3 | switchC -> OFF),
	OFF = ({takeoffOLD, landOLD, blinkOLD, readOLD,read.val[R]} -> OFF).

	E_OLDandNEW = Q0,
	Q0	= ({blinkOLD, landOLD, takeoffOLD} -> Q0
		  |readOLD -> Q1
		  |switchC -> Q0_N),
	Q1	= (read.val[0..2] -> Q0
		  |switchC -> Q1_N),
	Q0_N = ({land, blink, takeoff} -> Q0_N
		  |read -> Q1_N 
		  |switchE -> E_NEW_NOREADPENDING),
	Q1_N = (read.val[0..2] -> Q0_N 
		  |switchE -> E_NEW_READPENDING),
	E_NEW_NOREADPENDING	= ({land, blink, takeoff} -> E_NEW_NOREADPENDING
		  |read -> E_NEW_READPENDING),
	E_NEW_READPENDING	= (read.val[0..2] -> E_NEW_NOREADPENDING).

	||FASE1a3 = (C_Original || E_OLDandNEW).

||TEST = (C).


controllerSpec ObjectiveBefore = {
	safety = {S}
	assumption = {A_SwitchC}
	liveness = {Read,SwitchE}
	controllable = {ControllableActions}
}

controller ||C=(FASE1a3)~{ObjectiveBefore}.




