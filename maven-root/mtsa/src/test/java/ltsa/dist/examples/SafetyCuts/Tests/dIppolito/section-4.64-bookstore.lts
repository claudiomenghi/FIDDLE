set AlphaLib = {lib.{login, logout, search, searchOk, searchFail, order, orderOk, orderFail}}
set AlphaPay = {pay.{login, logout, pay, payOk, payFail}}
set AlphaCWS = {cws.{login, logout, getBook, gotBook, loginOk, logoutOk}}
set Failureset = {lib.{searchFail, orderFail}, pay.{payFail}}
set Controllable = {AlphaLib\{lib.{searchOk, searchFail, orderOk, orderFail}}, 
					AlphaPay\{pay.{payFail, payOk}}, cws.{gotBook, loginOk, logoutOk}}
set A = {AlphaLib, AlphaPay, AlphaCWS}

//environment 
L = (login->LOGGED_IN),
LOGGED_IN = (logout->L | search->SEARCHING),
SEARCHING = (searchOk->order->ORDERING | searchFail->LOGGED_IN),
ORDERING = (orderOk->LOGGED_IN | orderFail->LOGGED_IN).
||LIB = (lib:L).

P = (login->LOGGED_IN),
LOGGED_IN = (logout->P | pay->PAYING), 
PAYING = (payOk->LOGGED_IN | payFail->LOGGED_IN ).
||PAY = (pay:P).

C = (login->loginOk->LoggedIn),
LoggedIn = (logout->logoutOk->C | getBook->gotBook->LoggedIn).
||CWS = (cws:C).

||ENV = (PAY || LIB || CWS).

//fluents 
fluent F_Failures = <Failureset, A\{Failureset}>
fluent F_BothLogin = <{{lib, pay}.{login}}, A\{{lib, pay}.{login}}>
fluent F_BothLogout = <{{lib, pay}.{logout}}, A\{{lib, pay}.{logout}}>

fluent F_CWSLoggedOut = <cws.logoutOk, cws.loginOk>
fluent F_CWSTryingLogout = <cws.logout, cws.logoutOk>
fluent F_CWSTryLogout = <cws.logout, A\{cws.logout}>
fluent F_CWSLogoutOk = <cws.logoutOk, A\{cws.logoutOk}>

fluent F_CWSLoggedIn = <cws.loginOk, cws.logoutOk>
fluent F_CWSTryingLogin = <cws.login, cws.loginOk>
fluent F_CWSTryLogin = <cws.login, A\{cws.login}>
fluent F_CWSLoginOk = <cws.loginOk, A\{cws.loginOk}>

fluent F_LibLoggedIn = <lib.login, lib.logout>
fluent F_PayLoggedIn = <pay.login, pay.logout>

fluent F_LibLoggedOut = <lib.logout, lib.login>
fluent F_PayLoggedOut = <pay.logout, pay.login>

fluent F_CWSGetBook = <cws.getBook, A\{cws.getBook}>
fluent F_GotBook = <cws.gotBook, A\{cws.gotBook}>

fluent F_GettingBook = <cws.getBook, cws.gotBook>
fluent F_ProsessingGetBook = <cws.getBook, cws.gotBook>
fluent F_Pay = <pay.pay, A\{pay.pay}>
fluent F_Ordered = <lib.order, {lib.{search, logout}}>

fluent F_Search = <lib.search, A\{lib.search}>
fluent F_OrderedOk = <lib.orderOk, cws.gotBook>

fluent F_PaidOk = <pay.payOk, cws.getBook>//pay.logout>
fluent F_PayPending = <lib.orderOk, pay.payOk>

PAYMENT = NOT_PENDING,
NOT_PENDING = (lib.orderOk->PENDING | {{A}\{lib.orderOk, pay.pay}}->NOT_PENDING | pay.pay->ERROR ),
PENDING = ({{A}\{pay.payOk}}->PENDING | pay.payOk->NOT_PENDING).
||A = GetOnlyIfLoggedIn.

//safety
ltl_property CWSLogInOk = [](F_CWSLoginOk->(F_LibLoggedIn && F_PayLoggedIn))
ltl_property CWSLogOutOk = [](F_CWSLogoutOk->(F_LibLoggedOut && F_PayLoggedOut))
ltl_property Logins = [](F_BothLogin -> F_CWSTryingLogin)
ltl_property Logouts = [](F_BothLogout -> F_CWSTryingLogout)

ltl_property PayIfOrdered = [](F_Pay -> (F_PayPending))
ltl_property SearchIfLoggedIn = [](F_Search -> (!F_OrderedOk && F_LibLoggedIn && F_PayLoggedIn))
ltl_property GetBookProcess = [](F_Search-> F_ProsessingGetBook)
ltl_property GetOnlyIfLoggedIn = [](F_CWSGetBook -> F_CWSLoggedIn) //this is redundant
ltl_property GotBookOnlyIfPaid = [](F_GotBook -> F_PaidOk)


assert GotBook = F_GotBook
assert GettingBook = F_GettingBook
assert LoggedIn = F_CWSLoggedIn
assert LoggedInAndGettingBooks = (GettingBook && LoggedIn)
assert Failures = F_Failures


//controllers
controller ||C = (ENV)~{G1}.
checkCompatibility ||Compatible = (PAY || LIB || CWS)~{G1}.

//goals
controllerSpec G1 = {
       safety = {Logins, Logouts, SearchIfLoggedIn, GetBookProcess, 
				GotBookOnlyIfPaid, PAYMENT, CWSLogInOk, CWSLogOutOk}
       failure = {Failures}
       assumption = {LoggedInAndGettingBooks}
       liveness = {GotBook}
       controllable = {Controllable}
}

EXP = Q0,
	Q0	= (cws.login -> Q26),
	Q1	= (pay.pay -> Q5),
	Q2	= (lib.logout -> Q6
		  |pay.logout -> Q13),
	Q3	= (cws.logout -> Q2
		  |cws.getBook -> Q8),
	Q4	= (pay.logout -> Q10),
	Q5	= (pay.payFail -> Q1
		  |pay.payOk -> Q33),
	Q6	= (pay.logout -> Q17),
	Q7	= (cws.loginOk -> Q24),
	Q8	= (lib.search -> Q14),
	Q9	= (lib.search -> Q14),
	Q10	= (cws.logoutOk -> Q30),
	Q11	= (cws.loginOk -> Q3),
	Q12	= (lib.logout -> Q10),
	Q13	= (lib.logout -> Q17),
	Q14	= (lib.searchFail -> Q9
		  |lib.searchOk -> Q31),
	Q15	= (lib.orderFail -> Q9
		  |lib.orderOk -> Q27),
	Q16	= (lib.login -> Q18
		  |pay.login -> Q32),
	Q17	= (cws.logoutOk -> Q29),
	Q18	= (pay.login -> Q7),
	Q19	= (lib.logout -> Q4
		  |pay.logout -> Q12),
	Q20	= (cws.getBook -> Q8
		  |cws.logout -> Q19),
	Q21	= (pay.login -> Q11),
	Q22	= (lib.login -> Q11),
	Q23	= (lib.login -> Q21
		  |pay.login -> Q25),
	Q24	= (cws.getBook -> Q8
		  |cws.logout -> Q19),
	Q25	= (lib.login -> Q11),
	Q26	= (pay.login -> Q22
		  |lib.login -> Q28),
	Q27	= (pay.pay -> Q5),
	Q28	= (pay.login -> Q11),
	Q29	= (cws.login -> Q23),
	Q30	= (cws.login -> Q16),
	Q31	= (lib.order -> Q15),
	Q32	= (lib.login -> Q7),
	Q33	= (cws.gotBook -> Q20).
